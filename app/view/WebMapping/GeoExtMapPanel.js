Ext.define('VulnerabilityTool.view.WebMapping.GeoExtMapPanel',
    {
        extend: 'GeoExt.panel.Map',
        alias: 'widget.GeoExtMapPanel',
        id: 'GeoExtMapPanelId',
        border: 'false',
        layout: 'fit',
        region: 'center',
        width: '100%',
        height:'100%',
        map: {allOverlays: false},
        center: [34.53,-13.28],
        zoom: 8,
        initComponent: function() {
            var me = this,
                items = [],
                ctrl;
            var bounds = new OpenLayers.Bounds(
                32.67161822826747, -17.126278814895823,
                35.91841715676816, -9.363661672643952
            );
            var options = {
                maxExtent: bounds,
                //maxResolution: 0.0303227232119214,
                projection: new OpenLayers.Projection("EPSG:900913"),
                displayProjection: new OpenLayers.Projection("EPSG:4326"),
                units: "degrees",
                sphericalMercator: true

            };
            map = new OpenLayers.Map('map', options);
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            map.addControl(new OpenLayers.Control.Navigation({dragPanOptions: {enableKinetic: true}}));

            map.addControl(new OpenLayers.Control.Scale());
            map.addControl(new OpenLayers.Control.LoadingPanel());
            //	map.addControl(new OpenLayers.Control.OverviewMap());


            //The user is online and all baselayers from openstreet map, google and mapbox are loaded.
            if (status !== "offline") {

                /*osm_mapquest = new OpenLayers.Layer.OSM("MapQuest Open",
                    ["http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
                        "http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
                        "http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
                        "http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"],
                    {
                        attribution: "&copy; <a href='http://www.openstreetmap.org/'>OpenStreetMap</a>, under an <a href='http://www.openstreetmap.org/copyright' title='ODbL'>open license</a>. Tiles Courtesy of <a href='http://www.mapquest.com/'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png'>",

                        "tileOptions": {
                            "crossOriginKeyword": null
                        }
                    }
                );*/

                mapbox_satellite = new OpenLayers.Layer.XYZ("Mapbox Satellite",
                    ["http://a.tiles.mapbox.com/v4/mapbox.satellite/${z}/${x}/${y}.png?access_token=pk.eyJ1Ijoid29uZGllIiwiYSI6InlKcXpXT1UifQ.BQ3hMXdyffGusTRN8JnWOg"], {
                    sphericalMercator: true,
                    wrapDateLine: true,
                    numZoomLevels: 15,
                    transitionEffect: 'resize'
                    });


                /*mapbox_satellite = new OpenLayers.Layer.XYZ("Mapbox Satellite with Streets",
                    ["http://a.tiles.mapbox.com/v4/mapbox.streets-satellite/${z}/${x}/${y}.png?access_token=pk.eyJ1Ijoid29uZGllIiwiYSI6InlKcXpXT1UifQ.BQ3hMXdyffGusTRN8JnWOg"], {
                        sphericalMercator: true,
                        wrapDateLine: true,
                        numZoomLevels: 20,
                        transitionEffect: 'resize',
                        group: 'Base Layers'
                    });
                mapbox_terrain = new OpenLayers.Layer.XYZ("Mapbox Terrain",
                    ["http://a.tiles.mapbox.com/v4/mapbox.run-bike-hike/${z}/${x}/${y}.png?access_token=pk.eyJ1Ijoid29uZGllIiwiYSI6InlKcXpXT1UifQ.BQ3hMXdyffGusTRN8JnWOg"], {
                        sphericalMercator: true,
                        wrapDateLine: true,
                        numZoomLevels: 20,
                        transitionEffect: 'resize',
                        group: 'Base Layers'
                    });


		var World_Topo_Map = new OpenLayers.Layer.XYZ( "World Topo Map",
                    "http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/${z}/${y}/${x}",
                    {sphericalMercator: true} );

                ghyb = new OpenLayers.Layer.Google(
                    "Google Satellite with Streets",
                    {
                        isBaseLayer: true,
                        type: google.maps.MapTypeId.HYBRID,
                        numZoomLevels: 22,
                        visibility: false,
                        transitionEffect: 'resize',
                        group: 'Base Layers'
                    }
                );

                gphy = new OpenLayers.Layer.Google(
                    "Google Physical Terrain",
                    {
                        isBaseLayer: true,
                        type: google.maps.MapTypeId.TERRAIN,
                        visibility: false,
                        transitionEffect: 'resize',
                        group: 'Base Layers'
                    }
                );

                gmap = new OpenLayers.Layer.Google(
                    "Google Streets", // the default
                    {isBaseLayer: true, numZoomLevels: 20, visibility: false, transitionEffect: 'resize', group: 'Base Layers'}
                );

                gsat = new OpenLayers.Layer.Google(
                    "Google Satellite",
                    {
                        isBaseLayer: true,
                        type: google.maps.MapTypeId.SATELLITE,
                        numZoomLevels: 20,
                        visibility: false,
                        transitionEffect: 'resize',
                        group: 'Base Layers'
                    }
                );*/

var world_topo_map = new OpenLayers.Layer.XYZ( "ESRI",
                    "http://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/${z}/${y}/${x}",
                    {sphericalMercator: true} );
               
                //map.addLayers([world_topo_map, mapbox_terrain, mapbox_satellite, gsat, ghyb, gmap, gphy]);
                map.addLayers([world_topo_map,mapbox_satellite]);

            }

            //If the user has no internet and he/she is accessing the application within the same network that application is found,
            // The application will turn to offline mode and the base layer changes to Africa national boundaries.
            //No google, openstreet map or mapbox layers can be loaded.
            if (status == "offline") {
                var vector_style = new OpenLayers.Style({
                    'cursor': 'pointer',
                    'fillColor': '#F4EBDC',
                    'fillOpacity': .8,
                    'fontColor': '#a52505',
                    'label': '${country}',
                    'strokeColor': '#232323',
                    'strokeDashstyle': 'solid',
                    'strokeWidth': 1

                });

                var vector_style_map = new OpenLayers.StyleMap({
                    'default': vector_style
                });
                config.geoserver.malawi.url = config.geoserver.malawi.local_url; // Switch to the local url of geoserver.
                africa_outline = new OpenLayers.Layer.Vector( "Africa",
                    {
                        isBaseLayer: true,
                        styleMap:vector_style_map, displayInLayerSwitcher: false, visibility: false,
                        projection:  new OpenLayers.Projection('EPSG:4326'),
                        strategies: [new OpenLayers.Strategy.Fixed()],
                        protocol: new OpenLayers.Protocol.HTTP
                        ({
                            url:  "data/webmapping/africa.json",
                            format: new OpenLayers.Format.GeoJSON
                            ({
                                extractStyles: true,
                                extractAttributes: true
                            })
                        })
                    });


                map.addLayer(africa_outline);
                window.alert("The application is in Offline mode!");

                config.no_of_baselayers = 1; // Change the number of baselayers so that it will be excluded from print map layer selection.
            }


            map.addControl(new OpenLayers.Control.MousePosition
            (	{
                    id:'MousePosition_id',

                    numDigits: 2,
                    prefix: '(Lon/Lat)',
                    emptyString: '',
                    displayProjection: "EPSG:4326"
                }
            ));

            zoomInCtrl = new OpenLayers.Control.ZoomIn();
            map.addControl(zoomInCtrl);

            zoomOutCtrl = new OpenLayers.Control.ZoomOut();
            map.addControl(zoomOutCtrl);

            navigationHistoryCtrl = new OpenLayers.Control.NavigationHistory();
            map.addControl(navigationHistoryCtrl);


            //zoom box and pan controls
            OpenLayers.Control.CustomNavToolbar = OpenLayers.Class(OpenLayers.Control.Panel, {

                initialize: function(options) {
                    OpenLayers.Control.Panel.prototype.initialize.apply(this, [options]);
                    this.addControls([
                        new OpenLayers.Control.Navigation(),
                        //Here it come
                        new OpenLayers.Control.ZoomBox({alwaysZoom:true})
                    ]);
                    // To make the custom navtoolbar use the regular navtoolbar style
                    this.displayClass = 'olControlNavToolbar'
                },

                /**
                 * Method: draw
                 * calls the default draw, and then activates mouse defaults.
                 */
                draw: function() {
                    var div = OpenLayers.Control.Panel.prototype.draw.apply(this, arguments);
                    this.defaultControl = this.controls[0];
                    return div;
                }
            });

            var panel = new OpenLayers.Control.CustomNavToolbar();
            map.addControl(panel);




            vulnerability_index = new OpenLayers.Layer.WMS(
                "Vulnerability", config.geoserver.malawi.url,
                // "Vulnerability Index", "https://maps.rcmrd.org/geoserver/user_vulnerability_index/wms",
                {
                    "LAYERS": 'malawi_national_vulnerability_index',
                    // "LAYERS": 'user_vulnerability_index:vl7vbqh5v0iajck3ghs1dg5l5r1_e56_s11_a33',
                    "STYLES": '',
                    //opacity: 1,
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    visibility: true,
                    displayOutsideMaxExtent: true,
                    displayInLayerSwitcher: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Vulnerability'
                }
            );

            exposure_index = new OpenLayers.Layer.WMS(
                "Exposure", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_exposure_index',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayInLayerSwitcher: true,
                    //visibility: false,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );




            riverine_flood = new OpenLayers.Layer.WMS(
                "Riverine Flood", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_riverine_flood',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );

            temperature_trend = new OpenLayers.Layer.WMS(
//{visibility:false},
                "Temperature Trend", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_temperature_trend',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
		
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );
            precipitation_trend = new OpenLayers.Layer.WMS(
                "Precipitation Trend", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_precipitation_trend',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );

            coefficient_of_variation_of_precipitation = new OpenLayers.Layer.WMS(
                "Coefficient of Variation of Precipitation", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_coefficient_of_variation_of_precipitation',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );

            forest_fires = new OpenLayers.Layer.WMS(
                "Forest Fires", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_forest_fires',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png",
                    group: 'Exposure'
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );


            drought_physical_exposure = new OpenLayers.Layer.WMS(
                "Drought Physical Exposure", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_drought_physical_exposure',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Exposure'
                }
            );

// setup tiled layer
            lack_of_adaptive_capacity = new OpenLayers.Layer.WMS(
                "Lack of Adaptive Capacity", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_lack_of_adaptive_capacity_index',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );

            // setup tiled layer
            anthropogenic_biomes = new OpenLayers.Layer.WMS(
                "Anthropogenic Biomes", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_anthropogenic_biomes',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );
            // setup tiled layer
            education_level_of_mother = new OpenLayers.Layer.WMS(
                "Education Level of Mother", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_education_level_of_mother',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );
            // setup tiled layer
            health_infrastracture_index = new OpenLayers.Layer.WMS(
                "Health Infrastructure Index", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_health_infrastructure_index',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );


            // setup tiled layer
            irrigated_areas = new OpenLayers.Layer.WMS(
                "Irrigated Areas", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_irrigated_areas',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );
            // setup tiled layer
            literacy_levels = new OpenLayers.Layer.WMS(
                "Literacy Levels", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_literacy_levels',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );

            // setup tiled layer
            market_accessibility_time = new OpenLayers.Layer.WMS(
                "Market Accessibility", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_market_accessibility',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Lack of Adaptive Capacity'
                }
            );



            sensitivity_index = new OpenLayers.Layer.WMS(
                "Sensitivity", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_sensitivity_index',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );

            building_material = new OpenLayers.Layer.WMS(
                "Building Material", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_building_material',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );
            female_headed_household = new OpenLayers.Layer.WMS(
                "Female Headed Households", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_female_headed_households',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );

            infant_mortality_rate = new OpenLayers.Layer.WMS(
                "Infant Mortality Rate", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_infant_mortality_rate',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );

            malaria_susceptibility = new OpenLayers.Layer.WMS(
                "Malaria Susceptibility", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_malaria_susceptibility',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );


            population_density = new OpenLayers.Layer.WMS(
                "Population Density", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_population_density',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );


            poverty_levels = new OpenLayers.Layer.WMS(
                "Poverty Levels", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_poverty_levels',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );

            soil_organic_carbon = new OpenLayers.Layer.WMS(
                "Soil Organic Carbon", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_soil_organic_carbon',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Sensitivity'
                }
            );

            villages = new OpenLayers.Layer.WMS(
                "Villages", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_villages',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    isBaseLayer: false,
                    displayOutsideMaxExtent: true,
                    yx : {'EPSG:4326' : true},
                    group: 'Additional Information'
                }
            );



            district_boundaries = new OpenLayers.Layer.WMS(
                "District Boundaries", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_boundaries',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    isBaseLayer: false,
                    displayOutsideMaxExtent: true,
                    yx : {'EPSG:4326' : true},
                    group: 'Additional Information'
                }
            );


            TA_boundaries = new OpenLayers.Layer.WMS(
                "TA Boundaries", config.geoserver.malawi.url,
                {
                    "LAYERS": 'malawi_national_TAboundaries',
                    "STYLES": '',
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    isBaseLayer: false,
                    displayOutsideMaxExtent: true,
                    yx : {'EPSG:4326' : true},
                    group: 'Additional Information'
                }
            );
            var field_photos_select_style = new OpenLayers.Style({graphicYOffset: -24});
            var field_photos_default_style = new OpenLayers.Style({graphicYOffset: -24});

            var field_photos_style_map = new OpenLayers.StyleMap({
                'default': field_photos_default_style,
                'select': field_photos_select_style
            });


            //Start creating symbology rules
            var default_field_photos_marker = new OpenLayers.Rule({
                title: "Field Photos Location",
                symbolizer: {
                    'pointRadius': 12,
                    'cursor': "pointer",
                    externalGraphic: "assets/images/validation.png"
                    //graphicYOffset: 2
                }
            });


            //Start creating symbology rules
            var selected_field_photos_marker = new OpenLayers.Rule({
                title: "Field Photos",
                symbolizer: {
                    'pointRadius': 14,
                    'cursor': "pointer"
                }
            });

            field_photos_default_style.addRules([default_field_photos_marker]);
            field_photos_select_style.addRules([selected_field_photos_marker]);



            field_photos = new OpenLayers.Layer.Vector( "Field Photos", {
                isBaseLayer: false, displayInLayerSwitcher: true, visibility: false,
                projection:  new OpenLayers.Projection('EPSG:4326'),
                styleMap:field_photos_style_map,
                transparent: true,
                strategies: [new OpenLayers.Strategy.Fixed()],
                protocol: new OpenLayers.Protocol.HTTP
                ({
                    url:  "data/webmapping/ShowFieldValidation.php",
                    format: new OpenLayers.Format.GeoJSON
                    ({
                        extractStyles: true,
                        extractAttributes: true
                    })
                }),
                group: 'Additional Information'
            });

            // define "createPopup" function . This function loops through each marker properties to show on the popup
            function createPopup(feature) {

                var details = '<div class="popup_output">';
                details += '<div  class="marker_popup_content">'+

                '<img src="assets/images/field_photos/'+ feature.attributes.photo+'" class="popup_img">'+
                '<div class="caption">'+ feature.attributes.description+'<br>'+feature.attributes.name+', Malawi</div>'+
                '<div class="columnA" ><strong>Longitude: </strong>'+
                feature.attributes.longitude+'</div>'+
                '<div class="columnA"><strong>Latitude: </strong>'+
                feature.attributes.latitude+'</div>'+
                '<div class="columnA" ><strong>Captured Date: </strong>'+
                feature.attributes.date+'</div>';
                details += '</div>';
                details += '</div>';

                var markerPopup = new GeoExt.Popup({
                    title: 'Field Photo',
                    height:420,
                    width: 442,
                    location: feature,
                    cls:'popup_cls',
                    bodyPadding:'6px',
                    bodyStyle:'background:rgba(228, 225, 213, 0.83);',
                    html: details,
                    maximizable: true,
                    collapsible: true,
                    anchored: true,
                    moveable: true,
                    animCollapse: true,
                    shadow: true,
                    listeners: {
                        maximize: function (){
                            Ext.select('img.popup_img').setStyle('height',( (Ext.getBody().getViewSize().height*80 ) / 100)+'px');
                            Ext.select('img.popup_img').setStyle('width', 'auto');
                            Ext.select('img.popup_img').setStyle('max-height',( (Ext.getBody().getViewSize().height*80 ) / 100)+'px');
                        },
                        restore: function (){
                            Ext.select('img.popup_img').setStyle('width', '100%');
                            Ext.select('img.popup_img').setStyle('height', 'auto');
                            Ext.select('img.popup_img').setStyle('max-height', '320px');
                        }
                    }
                });


                // unselect feature when the popup
                // is closed
                markerPopup.on({
                    close: function () {
                        if (OpenLayers.Util.indexOf(field_photos.selectedFeatures, this.feature) > -1) {
                            unselect.unselect(field_photos.selectedFeatures.feature);
                        }
                    }
                });
                markerPopup.show();
            }


            map.addLayers([vulnerability_index,
                temperature_trend, riverine_flood, precipitation_trend, forest_fires,
                drought_physical_exposure, coefficient_of_variation_of_precipitation, exposure_index,

                anthropogenic_biomes, education_level_of_mother, health_infrastracture_index,
                irrigated_areas, literacy_levels, market_accessibility_time, lack_of_adaptive_capacity,

                building_material, female_headed_household, infant_mortality_rate, malaria_susceptibility, population_density,
                poverty_levels, soil_organic_carbon, sensitivity_index,
                district_boundaries, TA_boundaries, field_photos, villages]);

            // create popup on "featureselected"
            field_photos.events.on({
                featureselected: function (e) {
                    createPopup(e.feature);
                }
            });

            var select_field_photos = new OpenLayers.Control.SelectFeature(
                field_photos
            );
            map.addControl(select_field_photos);
            select_field_photos.activate();

            map.addControl(new OpenLayers.Control.ZoomBox());
            map.setCenter(new OpenLayers.LonLat(34.53,-13.28).transform(
                new OpenLayers.Projection("EPSG:4326"),
                map.getProjectionObject()
            ),7 );
            //bounds = new OpenLayers.Bounds(44.76, -7.85, 24.48, -18.55);
            bounds = new OpenLayers.Bounds(44.76, -7.85, 24.48, -18.55);


            Ext.apply(me,
                {
                    map: map
                });


            me.callParent(arguments);


        }
    });
Ext.onReady(function() {

    vulnerability_index_store = new GeoExt.data.LayerStore({
        layers: vulnerability_index
    });
    exposure_index_store = new GeoExt.data.LayerStore({
        layers: [exposure_index, temperature_trend, riverine_flood, precipitation_trend, forest_fires,
            drought_physical_exposure, coefficient_of_variation_of_precipitation]
    });
    lackadapcap_index_store = new GeoExt.data.LayerStore({
        layers: [lack_of_adaptive_capacity, anthropogenic_biomes, education_level_of_mother, health_infrastracture_index,
            irrigated_areas, literacy_levels, market_accessibility_time]
    });
    sensitivity_index_store = new GeoExt.data.LayerStore({
        layers: [sensitivity_index, building_material, female_headed_household, infant_mortality_rate,
            malaria_susceptibility, population_density, poverty_levels, soil_organic_carbon]
    });
    additional_information = new GeoExt.data.LayerStore({
        layers:[villages, field_photos, district_boundaries, TA_boundaries]
    });
    //This layer tree holds all Custom and default vulnerability layers, etc
    LayersTreeVulIndex = Ext.create('GeoExt.tree.LayerTreeBuilder', {
        cls:'LayersTreeVulIndex_cls',
        id: 'LayersTreeVulIndex_id',
        preventHeader:true,
        singleExpand:true,
        enableWmsLegends: false,
        enableVectorLegends: false,
        enableDD: true,
        border: true,
        region: "west",
        collapsible: true,
        layerStore:vulnerability_index_store,
        autoScroll: true
    });
    //This layer tree holds all Exposure layers, etc
    LayersTreeExposure = Ext.create('GeoExt.tree.LayerTreeBuilder', {
        cls:'LayersTreeComponents_cls',
        id: 'LayersTreeExposure_id',
        enableWmsLegends: false,
        enableVectorLegends: false,
        otherLayersText: 'Other Layers',
        enableDD: true,
        border: true,
        region: "west",
        title: "Exposure",
        split: true,
        collapsible: true,
        layerStore:exposure_index_store
    });
    //This layer tree holds all Lack of Adaptive Capacity layers, etc
    LayersTreeLackOfAdapCap = Ext.create('GeoExt.tree.LayerTreeBuilder', {
        cls:'LayersTreeComponents_cls',
        id: 'LayersTreeLackOfAdapCap_id',
        enableWmsLegends: false,
        enableVectorLegends: false,
        otherLayersText: 'Other Layers',
        border: true,
        region: "west",
        title: "Lack of Adaptive Capacity",
        split: true,
        collapsible: true,
        layerStore:lackadapcap_index_store
    });
    //This layer tree holds all sensitivity layers, etc
    LayersTreeSensitivity = Ext.create('GeoExt.tree.LayerTreeBuilder', {
        cls:'LayersTreeComponents_cls',
        id: 'LayersTreeSensitivity_id',
        enableWmsLegends: false,
        enableVectorLegends: false,
        otherLayersText: 'Other Layers',
        border: true,
        region: "west",
        title: "Sensitivity",
        split: true,
        collapsible: true,
        layerStore:sensitivity_index_store
    });
    //This layer tree holds additional information like boundaries, field layers, etc
    LayersTreeAdditional = Ext.create('GeoExt.tree.LayerTreeBuilder', {
        cls:'LayersTreeAdditional_cls',
        id: 'LayersTreeAdditional_id',
        enableWmsLegends: false,
        enableVectorLegends: false,
        otherLayersText: 'Other Layers',
        border: true,
        region: "west",
        title: "Additional Information",
        split: true,
        collapsible: true,
        layerStore:additional_information
    });
    vul_index_form.add(LayersTreeVulIndex);
    LayersAccordion.add(LayersTreeExposure);
    LayersAccordion.add(LayersTreeSensitivity);
    LayersAccordion.add(LayersTreeLackOfAdapCap);
    LayersAccordion.add(LayersTreeAdditional);

//Sets all layers visibility to false to avoid all layers loading at once.
// Unfortunately when visibility:false is assigned, all wms layers hides from Layers
    //As as result all are hidden then selected layers are shown as done in
    // the next code block.
    for (var i = config.no_of_baselayers; i < map.layers.length; i++) {
        map.layers[i].setVisibility(false);
    }
    if (status == "offline") {
        africa_outline.setVisibility(true);
    }

    vulnerability_index.setVisibility(true);
    district_boundaries.setVisibility(true);
    map.setLayerIndex(district_boundaries, 99);
    map.setLayerIndex(TA_boundaries, 99);
    map.setLayerIndex(field_photos, 100);
    map.setLayerIndex(villages, 99);
});
