Ext.onReady(function() {
    //Jquery Code on Slider and Spinner Widgets
    //Slider min and max values. 
    var min = 0;
    var max = 100;
    //When input value is submitted get get the index value from calss eg .1percent, get 1. and set the assigined value on the slider
    //Updates other sliders when key is removed and new value is set
    $(".divedeeper input").on('input', function () {
        var index = $(this).attr('class').substring(0, 1);

        var initial = $(this).val();
        if (isNaN(this.value)) {
            this.value = 0;
        }

        if (this.value >= 1 ){
            this.value = parseFloat(initial/10).toFixed(2);
        }
        $("#slider_" + index).slider('value', Math.round(this.value * 100));
        refreshSliders(index - 0);
    });
    //Updates other sliders when a keyboard is pressed and value removed
    $(".divedeeper input").on('keydown', function () {
        var index = $(this).attr('class').substring(0, 1);

        $("#slider_" + index).slider('value', Math.round(this.value * 100));
        refreshSliders(index - 0);

        //Updates input once keyboard key is removed and updates based on the existing input value
        $("input").on('input', function () {
            var index = $(this).attr('class').substring(0, 1);

            $("#slider_" + index).slider('value', Math.round(this.value * 100));
            refreshSliders(index - 0);//First update of other sliders
            refreshSliders(index - 0);//Second update of other sliders
        });

    });

    //The main slider function that carrys properties and events. 
    $('.selector').slider({
        //animate: 500,
        range: "max"
    }, {
        min: min
    }, {
        max: max
    }, {
        change: function (event, ui) { //Total value is sum of the 3 sliders set value and convert to floats on change of slider
            totalvalue = $("#slider_1").slider("value") + $("#slider_2").slider("value") + $("#slider_3").slider("value");
            $('.1percent').val($("#slider_1").slider("value") / 100);
            $('.2percent').val($("#slider_2").slider("value") / 100);
            $('.3percent').val($("#slider_3").slider("value") / 100);
        }
    }, {
        slide: function (event, ui) { //Total value is sum of the 3 sliders set value and convert to floats on slide of slider
            totalvalue = $("#slider_1").slider("value") + $("#slider_2").slider("value") + $("#slider_3").slider("value");
            $('.1percent').val($("#slider_1").slider("value") / 100);
            $('.2percent').val($("#slider_2").slider("value") / 100);
            $('.3percent').val($("#slider_3").slider("value") / 100);
        }
    });
    //Set default value for all sliders
    $("#slider_1").slider('value', 34);
    $("#slider_2").slider('value', 33);
    $("#slider_3").slider('value', 33);
    //Set defalt value for all input fields by converting to floats. 
    $('.1percent').val($("#slider_1").slider("value") / 100);
    $('.2percent').val($("#slider_2").slider("value") / 100);
    $('.3percent').val($("#slider_3").slider("value") / 100);
    //Refreshes other sliders based on the change of value of another slider. 
    function refreshSliders(slidermainin) {
        var value1 = $("#slider_1").slider("option", "value");
        var value2 = $("#slider_2").slider("option", "value");
        var value3 = $("#slider_3").slider("option", "value");
        var valuechange = (value1 + value2 + value3) - 100; //Change in value is, the sum of all values minus total = 100.
        var valuemain = 0, //Currently being changed value. 
            valueother1 = 0; //Value of the next input that will be affected by change in valuemain
        valueother2 = 0; //Value of the last input that will be affected by change in valuemain

        switch (slidermainin) {
            case 1:
                //When slider 1 is affected, first change slider 2 then when slider 2 is 0, 
                //change slider 3 till the value of slider 3 is 0 and slider 1 value is 1; 
                slidermain = "#slider_1";
                sliderother1 = "#slider_2";
                sliderother2 = "#slider_3";
                valuemain = value1; //slider1
                valueother1 = value2; //slider 2
                valueother2 = value3; //slider 3
                break;
            case 2:
                //When slider 2 is affected, first change slider 3 then when slider 3 is 0, 
                //change slider 1 till the value of slider 1 is 0 and slider 2 value is 1;  
                slidermain = "#slider_2";
                sliderother1 = "#slider_3";
                sliderother2 = "#slider_1";
                valuemain = value2; //slider 2
                valueother1 = value3; //slider 3
                valueother2 = value1; //slider1
                break;
            case 3:
                //When slider 3 is affected, first change slider 1 then when slider 1 is 0, 
                //change slider 2 till the value of slider 2 is 0 and slider 3 value is 1;  
                slidermain = "#slider_3";
                sliderother1 = "#slider_1";
                sliderother2 = "#slider_2";
                valuemain = value3; //slider 3
                valueother1 = value1; //slider1
                valueother2 = value2; //slider 2
                break;
        }

        if (valueother1 == 0) { //If valueother1 is 0 change valueother2
            if (valuechange <= 0) {
                $(sliderother2).slider('value', valueother2 - (valuechange / 2));
            } else {
                $(sliderother2).slider('value', valueother2 - valuechange);
            }
        } else { //If valueother1 is not 0 change valueother21
            if (valuechange <= 0) {
                $(sliderother1).slider('value', valueother1 - (valuechange / 2));
            } else {
                $(sliderother1).slider('value', valueother1 - valuechange);
            }
        }
    }
    //Inciciate slider value change when mouse is moved, mouse is removed and when keypressed on the slider handle using the refreshSlider function
    var bindSliders = function (selector, value) {
        $(selector).bind("slidechange slide", function (event, ui) {
            event.originalEvent && (event.originalEvent.type == 'mousemove' ||
            event.originalEvent.type == 'mouseup' || event.originalEvent.type == 'keydown') && refreshSliders(value);
        });
    };
    //Excute bindslider function for all sliders
    bindSliders("#slider_1", 1);
    bindSliders("#slider_2", 2);
    bindSliders("#slider_3", 3);
    //Spinner - increase/decrease value buttons function. 
    $(".1percent").spinner({
        min: 0,
        max: 1,
        step: 0.01,
        start: 0.34,
        numberFormat: "n",
        spin: function (event, ui) {
            //Spinner speak to range slider current input
            // alert(this.value * 100);
            $("#slider_1").slider('value', Math.round(ui.value * 100));
            // Spinner speak to range slider other inputs
            var index = $(this).attr('class').substring(0, 1);
            $("#slider_" + index).slider('value', Math.round(this.value * 100));
            refreshSliders(index - 0);
        }

    });
    //Spinner - increase/decrease value buttons function. 
    $(".2percent").spinner({
        min: 0,
        max: 1,
        step: 0.01,
        start: 0.33,
        numberFormat: "n",
        spin: function (event, ui) {
            //Spinner speak to range slider current input
            $("#slider_2").slider('value', Math.round(ui.value * 100));
            // Spinner speak to range slider other inputs
            var index = $(this).attr('class').substring(0, 1);
            $("#slider_" + index).slider('value', Math.round(this.value * 100));
            refreshSliders(index - 0);
        }
    });
    //Spinner - increase/decrease value buttons function. 
    $(".3percent").spinner({
        min: 0,
        max: 1,
        step: 0.01,
        start: 0.33,
        numberFormat: "n",
        spin: function (event, ui) {
            //Spinner speak to range slider current input
            $("#slider_3").slider('value', Math.round(ui.value * 100));
            // Spinner speak to range slider other inputs
            var index = $(this).attr('class').substring(0, 1);
            $("#slider_" + index).slider('value', Math.round(this.value * 100));
            refreshSliders(index - 0);
        }
    });

});

var shpGenerateCheckbox = Ext.create('Ext.form.field.Checkbox', {
    fieldLabel: 'Download a Zipped Shapefile',
    afterLabelTextTpl: '<img src="assets/images/about.png" data-qtip="Click on this checkbox to download a '+
    'zipped shapefile for the layers you have created. A popup message will appear'+
    ' when file creation is complete.">',
    id: 'current_vul_index_down_id'
});

vul_index_form = Ext.create('Ext.form.Panel', {
    title: "Vulnerability Index Modelling",
    minWidth: 280,
    id:'vul_index_form_id',
    rootVisible: false,
    bodyPadding: 10,
    items: [
        {
            xtype: 'panel',
            id:'index_weighting_id',
            height:145,
            //anchor: '100%',
            html:'<div class="slidercontent">'+
                    '<label class="classification">Classification Method </label>'+
                    '<select id="classification">' +
                '<option value="Equalinterval">Equal Interval</option>'+
                        '<option value="Quantile">Quantile</option>' +

                    '</select>'+
                    '<div class="slidertitles">'+
                        '<ul>'+
                            '<li>Exposure</li>'+
                            '<li>Sensitivity</li>'+
                            '<li>Lack of Adaptive Capacity</li>'+
                        '</ul>'+
                    '</div>'+
                    '<div class="conteneur">'+
                        '<div id="slider_1" class="selector inactive sliderhome"></div>'+
                        '<div style="clear"></div>'+
                        '<div id="slider_2" class="selector inactive sliderhome"></div>'+
                        '<div style="clear"></div>'+
                        '<div id="slider_3" class="selector inactive sliderhome"></div>'+
                        '<div style="clear"></div>'+
                    '</div>'+
                    '<div class="divedeeper input-append">'+
                        '<ul>'+
                            '<li>'+
                                '<input type="text" name="slider1" id="slider1_inp" class="1percent">'+
                            '</li>'+
                            '<li>'+
                                '<input type="text" name="slider2" id="slider2_inp" class="2percent">'+
                            '</li>'+
                            '<li>'+
                                '<input type="text" name="slider3" id="slider3_inp" class="3percent">'+
                            '</li>'+
                        '</ul>'+
                    '</div>'+
                '</div>'
        },
        shpGenerateCheckbox
    ],
    buttons: [
        {
            action:'generate_vul_index',
            text: 'Generate',
            id:'generate_button_id',
            handler: function() {
                //this.up('form').down('[name=bottles]').spinDown();
            }
        },
        {
            text: 'Reset',
            handler: function() {
                $("#slider_1").slider('value', 34);
                $("#slider_2").slider('value', 33);
                $("#slider_3").slider('value', 33);
            }
        }   
    ]
});


LayersAccordion = Ext.create('Ext.panel.Panel', {
    title: '',
    minWidth: 280,
    height: 340,
    id:"LayersAccordion_id",
    defaults: {
        // applied to each contained panel
        bodyStyle: 'padding:15px'
    },
    layout: {
        // layout-specific configs go here
        type: 'accordion',
        titleCollapse: false,
        animate: true
    },
    items: []
});
///new district, add here
SelectAdmin = Ext.create('Ext.panel.Panel', {
    title: '',
    xtype: 'panel',
    id: 'select_admin_id',
    height: 30,
    bodyStyle: 'padding:3px',
    items:[
        {
            xtype: 'combobox',
            fieldLabel: 'Select a Level',
            id: 'admin_level_id',
            store:['National', 'Chikwawa', 'Karonga', 'Kasungu', 'Nsanje', 'Phalombe', 'Salima'],
            value: 'National'
        }
    ]
});

WestPanel = new Ext.Panel ({
	region: 'west',
	xtype: 'panel',
	width: 300,
	id: 'westpanel_id',
	minWidth: 200,
	minHeight:400,
    listeners: {
        resize: Ext.Function.bind(function(comp) {
            comp.doLayout();
        }, this),
        collapse: function() {
            fix_to_bottom();
        },
        expand: function() {
            fix_to_bottom();
        }
    },
	title: 'Layers and Modelling',
	collapsible: true,
	split: true,
	items: [
            SelectAdmin,
            vul_index_form,
            LayersAccordion
    ]
});


DownloadModel = Ext.define('DownloadFileModel', {
    extend: 'Ext.data.Model',
    idProperty: 'filename',
    extraParams:{
        level: '',
        component: '',
        current: ''
    },
    fields: [
        'name', 'component', 'size', 'format', 'link'
    ]
});

DownloadStore = new Ext.data.Store({
    autoLoad: true,
    autoDestroy:true,
    type: 'json',
    id:'download_store_id',
    model: DownloadModel,
    pageSize: 10,
    remoteSort: false,
    proxy: {
        type: 'ajax',
        actionMethods: 'GET',
        url: 'data/webmapping/ListFiles.php',
        reader: {
            type: 'json'
        }
    },
    sorters: [
        {
            property : 'size',
            direction: 'ASC'
        }
    ]
});
Ext.onReady(function(){
    //Assign variable for height, width and bounds of layers onready to be used for downloads
    height = config.map.national.height;
    width = config.map.national.width;
    bounds = config.map.national.bounds;
});


var formatStore = Ext.create('Ext.data.Store', {
    fields: ['format', 'name'],
    data: [
        {
             format: 'All', name: 'All'
        },{
             format: 'tif', name: 'zipped geotiff'
        },
        {
             format: 'kml', name: 'kml'
        }, {
             format: 'shp', name: 'zipped shp'
        }, {
             format: 'pdf', name:  'pdf'
        }, {
             format: 'png', name: 'png'
        }, {
            format: 'zip', name: 'zipped pdf'
        }
    ]
});

var formatCombo = Ext.create('Ext.form.field.ComboBox', {
    fieldLabel: 'File Format',
    allowBlank: true,
    id:  'format_id',
    emptyText:'eg. tif, pdf',
    name:'format_name',
    forceSelection: true,
    queryMode: 'local',
    displayField: 'name',
    valueField: 'format',
    typeAhead: true,
    mode: 'local',
    triggerAction: 'all',
    recordField: 'format',
    lastQuery: '',
    store : formatStore
});
var componentsStore = Ext.create('Ext.data.Store', {
    fields: ['component'],
    data: [
        {
            component: 'All'
        },{
            component: 'Atlas'
        },{
            component: 'Vulnerability'
        }, {
            component: 'Exposure'
        }, {
            component: 'Sensitivity'
        }, {
            component: 'Lack of Adaptive Capacity'
        }, {
            component: 'Custom Vulnerability'
        }]
});
var componentsCombo = Ext.create('Ext.form.field.ComboBox', {
    fieldLabel: 'Component',
    allowBlank: true,
    id:  'component_id',
    emptyText:'',
    name:'component_name',
    forceSelection: true,
    queryMode: 'local',
    displayField: 'component',
    valueField: 'component',
    typeAhead: true,
    mode: 'local',
    triggerAction: 'all',
    recordField: 'component',
    lastQuery: '',
    store:componentsStore
});

componentsCombo.on('select', function(combo, records, opts) {
    DownloadGrid.getStore().clearFilter();
// if there are selected records and the first isn't
// 'All' then apply the filter
    if(records.length > 0 && records[0].get('component') !== 'All') {
        var filterComponent = records[0].get('component');
        DownloadGrid.getStore().filter('component', filterComponent);
    }
});
formatCombo.on('select', function(combo, records, opts) {
    DownloadGrid.getStore().clearFilter();
// if there are selected records and the first isn't
// 'All' then apply the filter
    if(records.length > 0 && records[0].get('format') !== 'All') {
        var filterFormat = records[0].get('format');
        DownloadGrid.getStore().filter('format', filterFormat);
    }
});

var searchTextField = Ext.create('Ext.form.field.Text', {
    fieldLabel: 'Search',
    id:'file_search_id',
    xtype: 'textfield',
    emptyText:'Search by name',
    enableKeyEvents: true,
    listeners: {
        keyup: function (string) {

            DownloadStore.clearFilter();

            var dataToDelete = [];

            //iterate and set flag
            DownloadStore.each(function(rec, idx){
                contains = false;

                for (field in rec.data) {

                    if (rec.data[field].indexOf(string.getValue().toLocaleLowerCase()) > -1) { //field contains
                        contains = true;
                    }
                }
                if (!contains) {
                    rec.filterMeOut = false;
                }else {
                    rec.filterMeOut = true;
                }
            });

            //custom filter object
            DownloadStore.filterBy(function(rec, id) {
                if(rec.filterMeOut) {
                    return true;
                }
                else {
                    return false;
                }
            });
        }
    }
});

DownloadGrid = Ext.create('Ext.grid.Panel', {
    store: DownloadStore,
    id: 'DownloadGrid_id',
    sortble:true,
    preventHeader:true,
    collapseDirection: Ext.Component.DIRECTION_BOTTOM,
    dockedItems: [{
        xtype: 'toolbar',
        dock: 'top',
        items: [componentsCombo, formatCombo, searchTextField]
    }],
    columns: [
        {
            text     :'Name',
            width   : 250,
            sortable : true,
            dataIndex:'name'
        },

        {
            text     : 'File Size',
            width    : 95,
            sortable : true,
           // renderer: Ext.util.Format.fileSize,
            dataIndex:'size'
        },
        {
            text     : 'Component',
            width    : 220,
            sortable : true,
            dataIndex:'component'
        },
        {
            text     :'Format',
            width    : 65,
            sortable : true,
            dataIndex:'format'
        },
        {
            text     : 'Link',
            flex    : 65,
            sortable : true,
            dataIndex:'link'
        }
    ],
    viewConfig: {
        stripeRows: true
    }
});

function beforeexpand_shift_up(){
    if (legend_popup.collapsed){
        legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, -225]);
    }else {
        legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, -350]);

    }
}
function beforecollapse_shift_down(){
    if (legend_popup.collapsed){
        legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, 75]);
    }else {
        legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, -50]);
    }
}
function hide_popups() {
    legend_popup.hide();
}
function show_popups(){
    if (legend_popup.collapsed){
        legend_popup.collapse();
        legend_popup.setWidth(150);
    }else {
        legend_popup.show();
    }
}

function fix_to_bottom(){

    if (legend_popup.collapsed){
        legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, -30]);
    }else {
        legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, -235]);
    }
}
Ext.onReady(function (){
    NorthPanel.setHeight( Ext.getCmp("MapPanelId").getHeight());
    DownloadGrid.setHeight( Ext.getCmp("MapPanelId").getHeight() - 40);
});

NorthPanel = new Ext.Panel ({
	region: 'north',
    extend:'Ext.Window',
	xtype: 'panel',
    title:'Download Data',
	id:'north_panel_id',
	cls:'north_panel_cls',
	minWidth: 260,
    collapsed: true,
    collapsible: true,
    collapseDirection: Ext.Component.DIRECTION_TOP,
    animCollapse: true,
    animate:true,
    collapseMode:"mini",
    minimizable: true,
    floatable: false,
    listeners: {
        beforeexpand:function(child){
            hide_popups();
            beforeexpand_shift_up();
            var height = this.getHeight();
            this.items.each(function(i) {
                if(child.id == i.id)
                    return true;
                height -= i.getHeight();
            });
            height -= child.header.getHeight();
            Ext.get(this.expanderId).setHeight(height, true);
        },
        beforecollapse:function(child) {

            var height = this.getHeight();
            this.items.each(function(i) {
                if(child.id == i.id)
                    return true;
                height -= i.getHeight();
            });
            height -= child.collapseMemento.data.height;
            Ext.get(this.expanderId).setHeight(height, true);
            beforecollapse_shift_down();
        },
        collapse: function() {
            show_popups();
            fix_to_bottom();
            map.baseLayer.redraw();


            map.setCenter(new OpenLayers.LonLat(34.53,-16.28).transform(
                new OpenLayers.Projection("EPSG:4326"),
                map.getProjectionObject()
            ), map.getZoom() );
            map.setCenter(new OpenLayers.LonLat(34.53,-13.28).transform(
                new OpenLayers.Projection("EPSG:4326"),
                map.getProjectionObject()
            ), map.getZoom() );
        },
        afterrender: function(cmp) {
            cmp.expanderId = Ext.id();
            cmp.el.insertHtml('afterBegin', '<div id="' + cmp.expanderId + '"></div>');
        },
        resize: function(cmp, width, height) {
            this.items.each(function(i) {
                height -= i.getHeight();
            });
            Ext.get(this.expanderId).setHeight(height);
        }
    },

	items: [DownloadGrid]
});

legendPanel = Ext.create ('GeoExt.LegendPanel', {
    bodyStyle: 'padding:5px',
    autoScroll: true,
    header:false,
    id:"legend_id",
    width:200,
    height:205,
    collapsible: true,
    defaults: {
        style: 'padding:5px',
        baseParams: {
            FORMAT: 'image/png',
            LEGEND_OPTIONS: 'forceLabels:on;fontName=Verdana;fontSize:12',
            WIDTH:'16',
            HEIGHT:'12'
        }
    },
    lines: false,
    layers: [malawi_national_vulnerability_index, malawi_national_exposure]
});

legend_popup = new Ext.Window({
    extend: 'Ext.window.Window',
    title:'Legend',
    width: 200,
    id:'legend_popup_id',
    minimizable: true,
    closable:false,
    collapseDirection: Ext.Component.DIRECTION_BOTTOM,
    items:[legendPanel],
    listeners: {
        show: function() {
            Ext.select('#legend_popup_id .x-tool-restore').setStyle('display', 'none');
            Ext.select('#legend_popup_id .x-tool-minimize').setStyle('display', 'block');
        },
        "minimize": function (window, opts) {
            window.collapse();
            window.setWidth(150);
            window.anchorTo("GeoExtMapPanelId", "bl", [0, -30]);
            Ext.select('#legend_popup_id .x-tool-restore').setStyle('display', 'block');
            Ext.select('#legend_popup_restore_id').setStyle('left', '122px');
            Ext.select('#legend_popup_restore_id').setStyle('z-index', '100');
            Ext.select('#legend_popup_id .x-tool-minimize').setStyle('display', 'none');
        }
    },
    tools: [{
        type: 'restore',
        id: 'legend_popup_restore_id',
        handler: function (evt, toolEl, owner, tool) {
            var window = owner.up('window');
            window.setWidth(200);
            window.expand('', false);
            window.anchorTo("GeoExtMapPanelId", "bl", [0, -235]);
            Ext.select('#legend_popup_id .x-tool-restore').setStyle('display', 'none');
            Ext.select('#legend_popup_id .x-tool-minimize').setStyle('display', 'block');
        }
    }]
});


Ext.onReady(function(){
    legend_popup.show();
    legend_popup.anchorTo("GeoExtMapPanelId", "bl", [0, -235]);
    window.onresize = function() {
        fix_to_bottom();
    };

});

Ext.define('VulnerabilityTool.view.WebMappingViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.WebMappingViewport',
	id: 'viewportId',
	renderTo: Ext.getBody(),
    layout: {
        type: 'border'
    },
    initComponent: function() 
	{
        var me = this;
        Ext.applyIf(me, {
		items: 
		[
			{
				xtype: 'panel',
                id:'header_id',
				region: 'north',
				height: 60, //orignal 60
                html: '<div class="header1"><div class="header2"><div class="header3">'+
                '<div class="header4"><div class="logobox"><img width="176" height="56" class="imghead" src="assets/images/rcmrd_head.png"></div>'+
                //'<div class="header4"><div class="logobox"><img width="74" height="56" class="imghead" src="assets/images/malawi_gov_head.png"></div>'+
                '<h1 class="topheader">Malawi Hazards and Vulnerability Modelling Tool</h1></div></div></div></div>'

			},
			{
				xtype: 'MapPanel'
			},
			WestPanel
		]
        });
 
        me.callParent(arguments);
    },
    handler: function () {

    }

});
Ext.onReady(function(){
    if (Ext.getBody().getViewSize().height<776){
        Ext.select('div#westpanel_id-body').setStyle('overflow', 'auto');
        WestPanel.setWidth(315);
        Ext.select('#LayersAccordion_id').setStyle('width', '100%');
        Ext.select('#index_weighting').setStyle('width', '102%');
        Ext.select('#vul_index_form_id').setStyle('width', '100%');
        Ext.select('#select_admin_id').setStyle('width', '100%');
        Ext.select('#westpanel_id-innerCt').setStyle('width', '100%');
    }


});

