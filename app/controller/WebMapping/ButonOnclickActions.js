var previousAdmin, format, malawi_national_vulnerability_index, custom_vulnerability_index_layer, malawi_national_exposure;
layersHidden=false;
function postGIS_to_shp(layername) {

    current_vul_index_down_val = Ext.getCmp('current_vul_index_down_id').getValue() + 0;
    selected_admin_level_val = Ext.getCmp('admin_level_id').getValue().toLowerCase();
    if (current_vul_index_down_val > 0) {
        Ext.Ajax.request({
            method: 'GET',
            url: 'data/webmapping/PostGIStoShp.php',
            params: {
                currentview:layername,
                level:selected_admin_level_val
            },
            success: function (result) {
                message = result.responseText;
                var successWindow = Ext.Msg.alert('Success!', message+'You can use the Downloads Menu to '+
                'access the Download Window and filter using Custom Vulnerability. <button '+
                'id="custom_downloads_locator">Click Here </button> to view and download you have created.');
               // console.log(message);
                Ext.getCmp('current_vul_index_down_id').setValue(0);
                downloads_generator();
                //Show where custom downloads are located
                Ext.get('custom_downloads_locator').on('click', function(e, t){
                    NorthPanel.expand();
                    DownloadGrid.getStore().filter('component', "Custom Vulnerability");
                    Ext.getCmp('component_id').setValue("Custom Vulnerability");
                    successWindow.hide();
                });
            },
            failure: function (error) {
                error_msg = error.responseText;
                console.log(error_msg);
               // Ext.Msg.alert('error', 'There is an error in creating a shpefile.');
            }
        });
    }
}


function generate_vul_index (){
    Ext.Ajax.timeout = 1200000;
    adminLevel = Ext.getCmp('admin_level_id').getValue().toLowerCase();
    //If admin specific custom layers array doesn't exist, create it.
    if (typeof window["custom" + '_' + adminLevel] === 'undefined') {
        window["custom" + '_' + adminLevel] = [];
    }

    Ext.define('LayerCreateAjax', {
        extend: 'Ext.data.Connection',
        singleton: true,
        constructor : function(config){
            this.callParent([config]);
            this.on("beforerequest", function(){
                Ext.getCmp('generate_button_id').disable();

                if(typeof layername === 'string'){
                    var layername_array = layername.split('_');
                    if (layername_array[2]==Ext.get('classification').dom.value.toLowerCase()[0] &&
                        layername_array[3].slice(1) ==Ext.get('slider1_inp').dom.value.slice(2) &&
                        layername_array[4].slice(1) == Ext.get('slider2_inp').dom.value.slice(2)){
                        Ext.Msg.show({
                            title: "Duplicate Request",
                            msg: "You have already generated a layer using the weights specified.",
                            icon: Ext.Msg.ERROR
                        });
                        Ext.getCmp('generate_button_id').enable();
                        return false;
                    }
                }
                Ext.select('.generating').show();
            });
            this.on("requestcomplete", function(){
                Ext.getCmp('generate_button_id').enable();
            });
        }
    });


    LayerCreateAjax.request({
        method: 'GET',
        params: {exposure: Ext.get('slider1_inp').dom.value,
            sensitivity: Ext.get('slider2_inp').dom.value,
            adaptivecapacity: Ext.get('slider3_inp').dom.value,
            classtype: Ext.get('classification').dom.value,
            level: Ext.getCmp('admin_level_id').getValue().toLowerCase()
        },
        url: 'data/webmapping/LayerPublisher.php',
        success: function(result) {
            layername = result.responseText;
            console.log(layername);

            Ext.select('.generating').hide();
            Ext.getCmp('generate_button_id').enable();
            var frist_classification = Ext.get('classification').dom.value.charAt(0);
            var exposure_weight = Ext.get('slider1_inp').dom.value;
            var sensetivity_weight = Ext.get('slider2_inp').dom.value;
            var lackadapcap_weight = Ext.get('slider3_inp').dom.value;
            layerlabel_suffix ='('+frist_classification+exposure_weight+', '+sensetivity_weight+', '+
            lackadapcap_weight+')';

            window["custom_vulnerability_index_layer" +'_'+ adminLevel] = new OpenLayers.Layer.WMS(
                "Custom Vulnerability "+layerlabel_suffix, config.geoserver.malawi.url,
                {
                    "LAYERS": layername,
                    transparent: true,
                    format: "image/png"
                },
                {
                    buffer: 0,
                    visibility: true,
                    displayOutsideMaxExtent: true,
                    isBaseLayer: false,
                    yx : {'EPSG:4326' : true},
                    group: 'Vulnerability' // add custom vul layer under Vulnerability index
                }
            );
	    vulnerability_index.setVisibility(false);
            map.addLayer(window["custom_vulnerability_index_layer" +'_'+ adminLevel]);
            //Push newly generated layer into admin custom layers array
            window["custom"+'_'+adminLevel].push(window["custom_vulnerability_index_layer" +'_'+ adminLevel]);

            postGIS_to_shp(layername);
            downloads_generator ();
            //Raise the overlays
            if (typeof district_boundaries !== "undefined") {
                map.setLayerIndex(district_boundaries, 99);
            }//
            if (typeof TA_boundaries !== "undefined") {
                map.setLayerIndex(TA_boundaries, 99);
            }
            if (typeof villages !== "undefined") {
                map.setLayerIndex(villages, 99);
            }
            if (typeof field_photos !== "undefined") {
                map.setLayerIndex(field_photos, 99);
            }
        },
        failure: function(error) {
            error_msg = error.responseText;
            console.log(error_msg);
            Ext.Msg.alert('Error', 'Sorry! There is an Error in Modelling.');
            Ext.select('.generating').hide();
            Ext.getCmp('generate_button_id').enable();
        }
    });

}


function downloads_generator (){
    var selected_admin_level_val = Ext.getCmp('admin_level_id').getValue();
    var lower_admin_level_val = selected_admin_level_val.toLowerCase();
    var GeoserverLayerNames = []; //Array for layer names
    var layersTreeGroups = []; //Array for layer names
    //if layer is empty, get layer names and group for all layers, else get for a single layer = custom layer

    for (var j = config.no_of_baselayers; (j < map.layers.length); j++) {
        //exclude layers that have undefined param (baselayer and overlays) and custom vulnerability layers
        if ( (map.layers[j].name.indexOf("Custom") == 0) &&  (typeof map.layers[j].params !== 'undefined') ) {
            //Loop through layers to get their geoserver Layer names.
            GeoserverLayerNames.push(map.layers[j].params.LAYERS);
            layersTreeGroups.push("Custom Vulnerability");
        }
        //exclude layers that have undefined param (baselayer and overlays) and non custom vulnerability layers
        if ( (map.layers[j].name.indexOf("Custom") == -1) &&  (typeof map.layers[j].params !== 'undefined') )   {
            //Loop through layers to get their geoserver Layer names.
            GeoserverLayerNames.push(map.layers[j].params.LAYERS);
            layersTreeGroups.push(map.layers[j].group);
        }
    }

    var GeoserverLayerNamesJSON = JSON.stringify(GeoserverLayerNames);
    var layersTreeGroupsJSON = JSON.stringify(layersTreeGroups);
        DownloadStore.proxy.url='data/webmapping/ListFiles.php?level='+lower_admin_level_val+
        '&component='+layersTreeGroupsJSON+'&format=&layers='+GeoserverLayerNamesJSON+
        '&height='+height+'&width='+width+'&bbox='+bounds;
        DownloadStore.reload();
}


function change_layers(newV, oldV) {

    layername = ""; //prevent showing error message when making vi generation using same weight in another district
    newValue = newV.toLowerCase();
    oldValue = oldV.toLowerCase();

    function addRemove_layers() {
        //Layers to be removed when each admin levels are selected.
        national = [];
        nsanje = ['building_material', 'literacy_levels', 'infant_mortality_rate'];
        kasungu = ['building_material', 'literacy_levels', 'infant_mortality_rate', 'riverine_flood'];
        karonga = ['building_material', 'literacy_levels', 'infant_mortality_rate', 'riverine_flood'];
        chikwawa = ['building_material', 'literacy_levels', 'infant_mortality_rate'];
        salima = ['building_material', 'literacy_levels', 'infant_mortality_rate'];
        phalombe = ['building_material', 'riverine_flood', 'infant_mortality_rate', 'education_level_of_mother'];

        //Find layers to be removed by filtering layers that exist in old admin level and  doesn't exist new Admin level
        var addLayers = window[oldValue].filter(function(x) { return window[newValue].indexOf(x) < 0 });
        for (var addlayer in addLayers ) { //Loop through removable layers
            map.addLayer(window[addLayers[addlayer]]); //Convert the string of layer variable names/values to variable and remove them from map
        }
        //Find layers to be added by filtering layers that doesn't exist in old admin level and that does exist new Admin level
        var removeLayers = window[newValue].filter(function(x) { return window[oldValue].indexOf(x) < 0 });
        for (var removeLayer in removeLayers) { //Loop through layers to be added.
            map.removeLayer(window[removeLayers[removeLayer]]);//Convert the string of layer variable names/values to variable and remove them from map
        }


    }
    function fix_components() {
        map.removeLayer(sensitivity_index);
        map.removeLayer(exposure_index);
        map.removeLayer(lack_of_adaptive_capacity);
        map.addLayer(exposure_index);
        map.addLayer(sensitivity_index);
        map.addLayer(lack_of_adaptive_capacity);
    }
    //district specific info such as coordinates, zoom, map height, width, and bounds
    addRemove_layers();
    height = config.map[newValue].height;
    width = config.map[newValue].width;
    bounds = config.map[newValue].bounds;
    center = config.map[newValue].center;
    zoom = config.map[newValue].zoom;

    map.setCenter(
        new OpenLayers.LonLat(center).transform(
            new OpenLayers.Projection("EPSG:4326"),
            map.getProjectionObject() ),
        zoom, true);
    fix_components();

    //If the previous selected admin level has custom layers, remove from the map when selected.
    if (typeof window["custom_vulnerability_index_layer" +'_'+ oldValue] !== 'undefined') {
        var d;
        for (d in window["custom" + '_' + oldValue]) {
            map.removeLayer(window["custom" + '_' + oldValue][d]);
        }
    }
    //If the new selected admin level has custom layers, add to map selected.
    if (typeof window["custom_vulnerability_index_layer" +'_'+ newValue] !== 'undefined') {
        var a;
        for (a in  window["custom" + '_' + newValue]) {
            map.addLayer( window["custom" + '_' + newValue][a]);
        }
    }

    //Loop through geoserver layer names and change their names with the new admin level selected
    for (var i = config.no_of_baselayers; i < map.layers.length; i++) {
        if (typeof map.layers[i].params !== 'undefined' && map.layers[i].name.indexOf("Boundaries") == -1) {   //&& map.layers[i].name.indexOf("Villages") == -1
            y = map.layers[i].params.LAYERS.split('_');
            y.splice(1, 1, newValue); // Replace previous value with the new adminlevel selected
            map.layers[i].params.LAYERS = y.join('_'); //Join them with new adminlevel added as layer name.
            map.layers[i].redraw(true);
        }
    }
    downloads_generator();

    ////Print
    //If print map is open zoom to the changed district
    if ( (typeof printMap !== "undefined") && (printMap.map !== "null") ) {
        printMap.map.setCenter(new OpenLayers.LonLat(center).transform(
            new OpenLayers.Projection("EPSG:4326"),
            map.getProjectionObject()
        ),zoom-1 );
            //remove all previous admin level layers except baselayers and print box
       // Ext.getCmp('print_district_boundaries_id').setValue(false);
        Ext.getCmp("layers_to_print_id").setValue("Select a Layer");


        //Loop through layer names to get their names to be used in layers to print combo.
        print_overlays_new = [];
        for (var p = config.no_of_baselayers; p < map.layers.length; p++) {
            if ((typeof map.layers[p].params !== 'undefined') && (map.layers[p].name.indexOf("Boundaries") == -1)){
                print_overlays_new.push(map.layers[p].name);
            }
        }

        Ext.getCmp('layers_to_print_id').bindStore(print_overlays_new);
        //Update villages on printmap
        if (typeof print_villages !== "undefined") {

            for (var j = 1; j < printMap.map.layers.length; j++) {
                if (typeof printMap.map.layers[j].params !== 'undefined' && printMap.map.layers[j].name.indexOf("Boundaries") == -1) {
               // if (printMap.map.layers[j].name.indexOf("Villages") > -1) {   //&& map.layers[i].name.indexOf("Villages") == -1
                    y = printMap.map.layers[j].params.LAYERS.split('_');
                    y.splice(1, 1, newValue); // Replace previous value with the new adminlevel selected
                    printMap.map.layers[j].params.LAYERS = y.join('_'); //Join them with new adminlevel added as layer name.
                    printMap.map.layers[j].redraw(true);
                    if (printMap.map.layers[j].name !== "Villages") {
                        printMap.map.removeLayer(printMap.map.layers[j]);
                    }
                }
            }



        }


    }

    //raise overlays on top
    map.setLayerIndex(district_boundaries, 99);
    map.setLayerIndex(TA_boundaries, 99);
    map.setLayerIndex(villages, 99);

}


function print_map() {
    Ext.require([
        'Ext.layout.container.Border',
        'Ext.Panel',
        'Ext.form.FormPanel',
        'GeoExt.data.MapfishPrintProvider',
        'GeoExt.panel.Map',
        'GeoExt.data.PrintPage',
        'GeoExt.plugins.PrintPageField',
        'GeoExt.plugins.PrintProviderField'
        //'GeoExt.panel.PrintMap'
    ]);

    var printPage;
            // The printProvider that connects us to the print service
    var printProvider = Ext.create('GeoExt.data.MapfishPrintProvider', {
        method: "GET", // "POST" recommended for production use
        // from the info.json script in the html
        capabilities: printCapabilities
    });
    // Our print page. Stores scale, center and rotation and gives us a page
    // extent feature that we can add to a layer.
    printPage = Ext.create('GeoExt.data.PrintPage', {
        printProvider: printProvider
    });
    //Style for the print box
    var boxStyle = new OpenLayers.Style({
        fillColor: "#A06331",
        fillOpacity: 0.3,
        strokeColor: "#A06331",
        strokeWidth: 1
    });
    // A layer to display the print page extent
    pageLayer = new OpenLayers.Layer.Vector("Print Box", {
        styleMap: new OpenLayers.StyleMap(boxStyle)
    });
    pageLayer.addFeatures(printPage.feature);
    printBaselayer = new OpenLayers.Layer.OSM("MapQuest Open",
        ["http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
            "http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
            "http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
            "http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"],
        {
            isBaseLayer: true,
            "tileOptions": {
                "crossOriginKeyword": null
            }
        }
    );
    if (status == "offline") {
        printBaselayer = new OpenLayers.Layer.WMS (
            "Africa Administrative Boundaries", config.geoserver.malawi.local_url,
            {
                "LAYERS": 'malawi_vulnerabilitytool:africa_admin_boundaries',
                "STYLES": '',
                transparent: true,
                format:"image/png"
            },
            {
                buffer: 0,
                opacity: 1,
                displayOutsideMaxExtent: true,
                isBaseLayer: false,
                yx : {'EPSG:4326' : true}
            }
        );
    }
    //set print map center and zoom based on the selected admin level
    var printCenter, printZoom;
    if (typeof center === "undefined" ){
        printCenter = config.map["national"].center;
        printZoom = config.map["national"].zoom;
    }
    else {
        printCenter = config.map[newValue].center;
        printZoom = config.map[newValue].zoom;
    }


    // The map we want to print
    printMap = Ext.create('GeoExt.panel.Map', {
        height: 450,
        width:422,
        id:'print_map_overview_id',
        map: {
            eventListeners: {
                // recenter/resize page extent after pan/zoom
                "moveend": function(){
                    printPage.fit(this, {mode: "screen"});
                }
            }
        },
        layers: [
            printBaselayer,
            pageLayer
        ],
        center: printCenter,
        zoom: printZoom
    });
    printMap.map.addControl(new OpenLayers.Control.LayerSwitcher());
    //zoom box and pan controls
    OpenLayers.Control.CustomNavToolbar = OpenLayers.Class(OpenLayers.Control.Panel, {
        initialize: function(options) {
            OpenLayers.Control.Panel.prototype.initialize.apply(this, [options]);
            this.addControls([
                new OpenLayers.Control.Navigation(),
                //Here it come
                new OpenLayers.Control.ZoomBox({alwaysZoom:true})
            ]);
            // To make the custom navtoolbar use the regular navtoolbar style
            this.displayClass = 'olControlNavToolbar'
        },

        /**
         * Method: draw
         * calls the default draw, and then activates mouse defaults.
         */
        draw: function() {
            var div = OpenLayers.Control.Panel.prototype.draw.apply(this, arguments);
            this.defaultControl = this.controls[0];
            return div;
        }
    });

    var panel = new OpenLayers.Control.CustomNavToolbar();
    printMap.map.addControl(panel);
//Loop through layer names to get their names to be used in layers to print combo.
    print_overlays = [];
    for (var p = config.no_of_baselayers; p < map.layers.length; p++) {
        if ((typeof map.layers[p].params !== 'undefined') && (map.layers[p].name.indexOf("Boundaries") == -1)){
            print_overlays.push(map.layers[p].name);
        }
    }

    // The form with fields controlling the print output
    printForm = Ext.create('Ext.form.FormPanel', {
        region: "west",
        width: 262,
        bodyStyle: "padding:5px",
        id: 'print_form_id',
        labelAlign: "top",
        defaults: {anchor: "100%"},
        items: [
            {
                xtype: "combobox",
                store: print_overlays,
                displayField : 'overlays',
                valueField : 'overlays',
                value: 'Select a Layer',
                fieldLabel: "Select a Layer to Print",
                id: "layers_to_print_id",
                queryMode: 'local',
                listeners: {
                    change: function(combo, newV, oldV){
                        for (var i = config.no_of_baselayers; i < map.layers.length; i++) {
                            map.layers[i].setVisibility(false);
                        }

                        //Set the visibility of layers to display on legend
                        if (newV !=="Select a Layer") {
                            //Remove the old map from print map if exist.
                           if (oldV !== "Select a Layer") {//don't run if old value is empty
                                var removableLayer = printMap.map.getLayersByName(oldV)[0];
                                printMap.map.removeLayer(removableLayer);
                           }

                            var MainLayer = map.getLayersByName(newV)[0];
                            MainLayer.setVisibility(true);
                            //Add the layer based on the param of the main layer with the same name as the combo value
                            selected_print_layer = new OpenLayers.Layer.WMS(
                                combo.getValue(), config.geoserver.malawi.url,
                                {
                                    "LAYERS": MainLayer.params.LAYERS,
                                    "STYLES": '',
                                    transparent: true,
                                    format: "image/png"
                                },
                                {
                                    buffer: 0,
                                    visibility: true,
                                    displayOutsideMaxExtent: true,
                                    displayInLayerSwitcher: true,
                                    isBaseLayer: false,
                                    yx : {'EPSG:4326' : true}
                                }
                            );
                            printMap.map.addLayer(selected_print_layer);

                            //Auto generate title from the layer selected
                            var selectedLayer = Ext.getCmp("layers_to_print_id").getValue();
                            var selectedLayerGroup = map.getLayersByName(selectedLayer)[0].group;
                            if (selectedLayer == selectedLayerGroup) {
                                Ext.getCmp("map_title_id").setValue(selectedLayer);
                            }
                            else {
                                Ext.getCmp("map_title_id").setValue(selectedLayerGroup+': '+selectedLayer);
                            }
                        }
                        else {
                            var removableLayer2 = printMap.map.getLayersByName(oldV)[0];
                            printMap.map.removeLayer(removableLayer2);
                            Ext.getCmp("map_title_id").setValue("");
                        }

                        var MainDistrictBoundaryLayer = map.getLayersByName("District Boundaries")[0];
                        var MainTABoundaryLayer = map.getLayersByName("TA Boundaries")[0];
                        var MainVillagesLayer = map.getLayersByName("Villages")[0];
                        //set visibility

                        MainDistrictBoundaryLayer.setVisibility(Ext.getCmp("print_district_boundaries_id").getValue());
                        MainTABoundaryLayer.setVisibility(Ext.getCmp("print_TA_boundaries_id").getValue());
                        MainVillagesLayer.setVisibility(Ext.getCmp("print_villages_id").getValue());


                        //Raise the overlays
                        if (typeof boundary_print_layer !== "undefined") {
                            printMap.map.setLayerIndex(boundary_print_layer, 99);
                        }//
                        if (typeof print_villages !== "undefined") {
                            printMap.map.setLayerIndex(print_villages, 99);
                        }
                        if (typeof TAboundary_print_layer !== "undefined") {
                            printMap.map.setLayerIndex(TAboundary_print_layer, 99);
                        }
                        printMap.map.setLayerIndex(pageLayer, 99); //put print box on top.
                    }
                },
                typeAhead: true,
                triggerAction: "all"
            },
            {
                xtype: "checkbox",
                boxLabel: "Overlay Villages",
                id: "print_villages_id",
                listeners:{
                    change: function(checkbox, value){
                        //Also set the visibility of the main layer to true
                        var MainVillagesLayer = map.getLayersByName("Villages")[0];
                        MainVillagesLayer.setVisibility(value);

                        if (value === true) {
                            print_villages = new OpenLayers.Layer.WMS(
                                "Villages", config.geoserver.malawi.url,
                                {
                                    "LAYERS":  MainVillagesLayer.params.LAYERS,
                                    "STYLES": '',
                                    transparent: true,
                                    format: "image/png"
                                },
                                {
                                    buffer: 0,
                                    isBaseLayer: false,
                                    displayOutsideMaxExtent: true,
                                    yx : {'EPSG:4326' : true}
                                }
                            );
                            printMap.map.addLayer(print_villages);
                        }
                        if (value === false) {
                            printMap.map.removeLayer(print_villages);
                        }
                        printMap.map.setLayerIndex(pageLayer, 99); //put print box on top.
                    }

                }
            },
            {
                xtype: "checkbox",
                boxLabel: "Overlay TA Boundaries",
                id: "print_TA_boundaries_id",
                listeners:{
                    change: function(checkbox, value){
                        //Also set the visibility of the main layer to true
                        var MainTABoundaryLayer = map.getLayersByName("TA Boundaries")[0];
                        MainTABoundaryLayer.setVisibility(value);
                        if (value === true) {
                            //create boundary layer
                            TAboundary_print_layer = new OpenLayers.Layer.WMS(
                                "TA Boundaries", config.geoserver.malawi.url,
                                {
                                    "LAYERS": "malawi_national_TAboundaries",
                                    "STYLES": '',
                                    transparent: true,
                                    format: "image/png"
                                },
                                {
                                    buffer: 0,
                                    displayOutsideMaxExtent: true,
                                    displayInLayerSwitcher: true,
                                    isBaseLayer: false,
                                    yx: {'EPSG:4326': true}
                                }
                            );
                        }

                        printMap.map.addLayer(TAboundary_print_layer);

                        if (value === false) {
                            printMap.map.removeLayer(TAboundary_print_layer);
                        }
                        printMap.map.setLayerIndex(pageLayer, 99); //put print box on top.
                    }

                }
            },

            {
                xtype: "checkbox",
                boxLabel: "Overlay District Boundaries",
                id: "print_district_boundaries_id",
                listeners:{
                    change: function(checkbox, value){
                        //Also set the visibility of the main layer to true
                        var MainDistrictBoundaryLayer = map.getLayersByName("District Boundaries")[0];
                        MainDistrictBoundaryLayer.setVisibility(value);
                        if (value === true) {
                            //create boundary layer
                            boundary_print_layer = new OpenLayers.Layer.WMS(
                                "District Boundaries", config.geoserver.malawi.url,
                                {
                                    "LAYERS": "malawi_national_boundaries",
                                    "STYLES": '',
                                    transparent: true,
                                    format: "image/png"
                                },
                                {
                                    buffer: 0,
                                    displayOutsideMaxExtent: true,
                                    displayInLayerSwitcher: true,
                                    isBaseLayer: false,
                                    yx: {'EPSG:4326': true}
                                }
                            );
                        }

                        printMap.map.addLayer(boundary_print_layer);

                        if (value === false) {
                            printMap.map.removeLayer(boundary_print_layer);
                        }
                        printMap.map.setLayerIndex(pageLayer, 99); //put print box on top.
                    }

                }
            },
            {
                xtype: "checkbox",
                boxLabel: "Include legend?",
                id: "include_legend_id",
                checked: true
            },
            {
                xtype: "combo",
                store: printProvider.layouts,
                displayField: "name",
                    name:"layout",
                fieldLabel: "Layout",
                typeAhead: true,
                queryMode: "local",
                triggerAction: "all",
                plugins: Ext.create('GeoExt.plugins.PrintProviderField', {
                    printProvider: printProvider
                })
            },
            {
                xtype: "combo",
                store: printProvider.dpis,
                displayField: "name",
                fieldLabel: "Resolution",
                displayTpl: Ext.create('Ext.XTemplate',
                    '<tpl for=".">{name} dpi</tpl>'
                ),
                tpl: '<tpl for=".">' +
                '<li role="option" class="x-boundlist-item">' +
                '{name} dpi' +
                '</li>' +
                '</tpl>',
                typeAhead: true,
                queryMode: "local",
                triggerAction: "all",
                plugins: Ext.create('GeoExt.plugins.PrintProviderField', {
                    printProvider: printProvider
                })
            },
            {
                xtype: "combo",
                store: printProvider.scales,
                displayField: "name",
                fieldLabel: "Scale",
                typeAhead: true,
                queryMode: "local",
                name:"scale",
                triggerAction: "all",
                plugins: Ext.create('GeoExt.plugins.PrintPageField',{
                    printPage: printPage
                })
            },
            {
                xtype: "textfield",
                name: "rotation",
                fieldLabel: "Rotation",
                plugins: Ext.create('GeoExt.plugins.PrintPageField', {
                    printPage: printPage
                })
            },
            {
                xtype: "textarea",
                name: "mapTitle",
                value: "",
                fieldLabel: "Map Title",
                id: 'map_title_id',
                allowBlank: false,
                plugins: Ext.create('GeoExt.plugins.PrintPageField', {
                    printPage: printPage
                })
            }
        ],
        buttons: [
            {
                text: "Create PDF",
                handler: function() {
                    if (printForm.getForm().isValid()) {
                        //convenient way to fit the print page to the visible map area
                        var includeLegend = Ext.getCmp('include_legend_id').getValue();
                        printProvider.print(printMap, printPage, includeLegend && {legend: legendPanel});
                    } else {
                        Ext.Msg.show({
                            title: "Invalid form",
                            msg: "The values in the form are invalid.",
                            icon: Ext.Msg.ERROR
                        });
                    }
                }
            }
        ]
    });

    //The main panel
    printPopup =  new Ext.Window({
        id:'print_window_id',
        layout: "border",
        width: 700,
        maximizable: true,
        closeAction:'destroy',
        height: 470,
        items: [printMap, printForm],
        listeners: {
            resize: function (win, width, height, eOpts ){
                printMap.setSize(width - 270, height);
                printMap.map.updateSize();
                printMap.map.baseLayer.redraw();
            },
            close: function () {
                delete boundary_print_layer;
                delete print_villages;
                delete TAboundary_print_layer;
            }
        }
    });

    printPopup.show();

    printMap.map.setCenter(new OpenLayers.LonLat(printCenter).transform(
        new OpenLayers.Projection("EPSG:4326"),
        map.getProjectionObject()
    ),printZoom-1 );
}


function show_help_wizard() {

    var navigate = function (panel, direction) {
        var layout = panel.getLayout();
        layout[direction]();
        Ext.getCmp('move_prev').setDisabled(!layout.getPrev());
        Ext.getCmp('move_next').setDisabled(!layout.getNext());
    };


    function show_map_elements_fun() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '#eastpanel_id, .header1, ' +
        '#MapPanelId,  #GeoExtMapPanelId,#MainToolbar_id,' +
        ' .x-splitter {opacity:0.1;}' +
        '#westpanel_id{opacity:1;}';
        document.getElementsByTagName('head')[0].appendChild(style);
        legend_popup.hide();
    }

    function show_select_level_fun() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '#LayersAccordion_id, #westpanel_id_header, ' +
        '#vul_index_form_id, .header1, .x-tab-after-title,#GeoExtMapPanelId,' +
        '#MainToolbar_id, .x-splitter,.x-tab-default-top' +
        '{opacity:0.1;} #westpanel_id, #select_admin_id {opacity:1;}';
        document.getElementsByTagName('head')[0].appendChild(style);
        WestPanel.body.dom.scrollTop = 0;
        legend_popup.hide();
    }

    function show_vul_index_modelling_fun() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '#LayersAccordion_id, #westpanel_id_header, ' +
        '#select_admin_id, .header1, .x-tab-after-title,#GeoExtMapPanelId,' +
        '#MainToolbar_id, .x-splitter,.x-tab-default-top' +
        '{opacity:0.1;} #westpanel_id, #vul_index_form_id {opacity:1;}';
        document.getElementsByTagName('head')[0].appendChild(style);
        WestPanel.body.dom.scrollTop = 30;
        legend_popup.hide();
    }

    function show_layers_accordion_fun() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '#vul_index_form_id, #westpanel_id_header, #select_admin_id, ' +
        '.header1, .x-tab-after-title,#GeoExtMapPanelId,#MainToolbar_id, .x-splitter,' +
        '.x-tab-default-top {opacity:0.1;} #westpanel_id, #LayersAccordion_id {opacity:1;}';
        document.getElementsByTagName('head')[0].appendChild(style);
        WestPanel.body.dom.scrollTop = 423;
        legend_popup.hide();
    }


    function show_map_fun() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = ' .tophead, #westpanel_id, .x-splitter, ' +
        '#MainToolbar_id{opacity:0.1;}  #MapPanelId, #GeoExtMapPanelId{opacity:1;}';
        document.getElementsByTagName('head')[0].appendChild(style);

        legend_popup.show();
        Ext.select('#logos_popup_id .x-tool-restore').setStyle('display', 'block');
        Ext.select('#logos_popup_restore_id').setStyle('left', '122px');
        Ext.select('#logos_popup_restore_id').setStyle('z-index', '100');
        Ext.select('#logos_popup_id .x-tool-minimize').setStyle('display', 'none');
    }

    function show_toolbar_fun() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '.tophead, #westpanel_id, .x-splitter, ' +
        '#GeoExtMapPanelId{opacity:0.1;}  #MapPanelId, #MainToolbar_id {opacity:1;}';
        document.getElementsByTagName('head')[0].appendChild(style);
        legend_popup.hide();
    }

    function reset_opacity() {
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = '#vul_index_form_id, #westpanel_id_header, #select_admin_id,' +
        ' .header1, .tophead, #westpanel_id, #LayersAccordion_id, .tophead,#logopanelID, ' +
        '.tophead, .x-tab-after-title, #MainToolbar_id, .x-splitter,' +
        '#eastpanel_id, #searchform_id-outerCt, #GeoExtMapPanelId,.x-tab-default-top,' +
        '.x-tab-active, #MapPanelId,  #MainToolbar_id{opacity:1}'
        document.getElementsByTagName('head')[0].appendChild(style);
        legend_popup.show();
        Ext.select('#logos_popup_id .x-tool-restore').setStyle('display', 'block');
        Ext.select('#logos_popup_restore_id').setStyle('left', '122px');
        Ext.select('#logos_popup_restore_id').setStyle('z-index', '100');
        Ext.select('#logos_popup_id .x-tool-minimize').setStyle('display', 'none');
    }


    var help_wizard = Ext.create('Ext.panel.Panel', {
        height: 272,
        id: 'help_wizard_id',
        alias: 'widget.HelpWizard',
        layout: 'card',
        autoDestroy: true,
        bodyStyle: 'padding:15px',
        defaults: {
            // applied to each contained panel
            border: false
        },
        animate: true,
        // just an example of one possible navigation scheme, using buttons
        bbar: [{
            id: 'move_prev',
            text: 'Back',
            handler: function (btn) {
                navigate(btn.up("panel"), "prev");
                if (Ext.getCmp('card-0').isVisible() === true) {
                    reset_opacity();
                }
                if (Ext.getCmp('card-last').isVisible() === true) {
                    reset_opacity();
                }
                if (Ext.getCmp('card-1').isVisible() === true) {
                    show_map_elements_fun();
                }
                if (Ext.getCmp('card-2').isVisible() === true) {
                    show_select_level_fun();
                }
                if (Ext.getCmp('card-3').isVisible() === true) {
                    show_vul_index_modelling_fun();
                }
                if (Ext.getCmp('card-4').isVisible() === true) {
                    show_layers_accordion_fun();
                }
                if (Ext.getCmp('card-5').isVisible() === true) {
                    show_map_fun();
                }
                if (Ext.getCmp('card-6').isVisible() === true) {
                    show_toolbar_fun();
                }
                var nexttext = Ext.getCmp('move_next');
                switch (Ext.getCmp('card-last').isVisible()) {
                    case false:
                        nexttext.setText('Next');
                        break;
                    case true:
                        nexttext.setText('Done');
                        break;
                    default:
                        nexttext.setText('Next');
                        break;
                }
            },
            disabled: true
        }, '->', // greedy spacer so that the buttons are aligned to each side
            {
                id: 'cancel_button',
                xtype: 'button',
                cls: 'secondary_button',
                text: 'Cancel',
                handler: function () {
                    this.up('window').close();
                }
            }, '->',
            {
                id: 'move_next',
                text: 'Next',
                handler: function (btn) {
                    navigate(btn.up("panel"), "next");
                    if (Ext.getCmp('card-0').isVisible() === true) {
                        reset_opacity();
                    }
                    if (Ext.getCmp('card-last').isVisible() === true) {
                        reset_opacity();
                    }
                    if (Ext.getCmp('card-1').isVisible() === true) {
                        show_map_elements_fun();
                    }
                    if (Ext.getCmp('card-2').isVisible() === true) {
                        show_select_level_fun();
                    }
                    if (Ext.getCmp('card-3').isVisible() === true) {
                        show_vul_index_modelling_fun();
                    }
                    if (Ext.getCmp('card-4').isVisible() === true) {
                        show_layers_accordion_fun();
                    }
                    if (Ext.getCmp('card-5').isVisible() === true) {
                        show_map_fun();
                    }
                    if (Ext.getCmp('card-6').isVisible() === true) {
                        show_toolbar_fun();
                    }
                    switch (Ext.getCmp('card-last').isVisible()) {
                        case false:
                            this.setText('Next');
                            break;
                        case true:
                            this.setText('Done');
                            break;
                        default:
                            this.setText('Next');
                            break;
                    }
                }
            }],

        //the panels (or "cards") within the layout
        items: [
            {
                id: 'card-0',
                itemId: 'card-0',
                html: '<h2>Welcome to the Help Wizard!</h2><div class="wizardtxt"><p>Please follow' +
                ' this wizard to quickly start using the tool. Click the next' +
                ' button to learn about each components.</p>' +
                'You can run this wizard again by clicking on the <img src="assets/images/help.png"> Help ' +
                'button. <br>If you don\'t wish to continue click on the cancel button below.<br><p></p>' +
                '</div>'+
                '<p style="line-height: 19px; margin-top:-4px;">Developed by <a target="_blank" ' +
                'href="http://www.rcmrd.org/">RCMRD</a> and <a target="_blank" href="https://www.servirglobal.net/"> ' +
                'SERVIR</a></p><span class="wizard_navigation">Step 1 of 8<br></span>'
            },
            {
                id: 'card-1',
                html: '<h2>Layers and Modelling</h2><div class="wizardtxt">Layers and Modelling, ' +
                'located on the left side of your screen, is ' +
                'composed of the administrative levels drop down selection, the Vulnerability Index Modelling panel ' +
                'and the Layers accordion.<br> We will cover them in detail in the next page.' +
                '</div><span class="wizard_navigation">Step 2 of 8' +
                '</span><br>'
            },
            {
                id: 'card-2',
                html: '<h2>The Administrative Level Drop Down Selection</h2><div class="wizardtxt">' +
                'The drop down menu enables you choose an administrative level to visualize, ' +
                'download, and run modelling maps.<br>' +
                '</div>' +
                '<span class="wizard_navigation">Step 3 of 8' +
                '</span><br>'
            },
            {
                id: 'card-3',
                html: '<h2>The Vulnerability Modelling</h2><div class="wizardtxt">' +
                'This tool enables you to generate your own vulnerability layer based on the weights you have provided ' +
                'for the three components, exposure, sensitivity, and lack of adaptive capacity. ' +
                '<br>You can use the sliders, the number input or their spinners to change the weights. ' +
                'The sum of the weights is 1.' +
                'Above the sliders, you can choose two classification methods, quantile and equal interval.<br>' +
                'When you click on the Generate button, a new vulnerability layer is created based on the ' +
                'weights you have provided.<br>' +
                'The layer name you generate with the default values looks like ' +
                '<b>Custom Vulnerability (E 0.34, 0.33, 0.33)</b>.<br>' +
                'E - refers to Equal interval. If you use quantile, it will be Q in place of E.' +
                '0.34 - weight for Exposure, 0.33 - weight for Sensitivity, and 0.33 - weight for lack of adaptive capacity.'+
                '</div>' +
                '<span class="wizard_navigation">Step 4 of 8' +
                '</span><br>'
            },
            {
                id: 'card-4',
                html: '<h2>The Layers Accordion</h2><div class="wizardtxt"> ' +
                'All layers used to generate the three components are located in the layers accordion. They are ' +
                'categorized under the 3 components. There is also additional information layers container that is ' +
                'composed of the field photos layer and administrative boundaries.<br>' +
                'You can view and hide the layers by checking and unchecking them. You can also hide/ show all layers ' +
                'using   <img src="assets/images/show.png">  icon located in the Toolbar. You can also show and hide ' +
                'each layer groups by pressing the plus or minus buttons located at the right side of the headers.' +
                '</div><span class="wizard_navigation">Step 5 of 8' +
                '</span><br>'
            },
            {
                id: 'card-5',
                html:'<h2>The Map</h2><div class="wizardtxt">The Map panel, located at the center of the screen ' +
                'visualizes all pre-generated and on the fly generated layers. At the top left, the map has zoom in and ' +
                'zoom out buttons, the select and zoom and the pan buttons that disables the select and zoom button. <br>' +
                'On the top right corner, the layer switcher is located, that enables the select and unselect layers. ' +
                'All baselayers are found here in addition to all other layers. <br>' +
                'At the bottom left, the legend displays the symbology of the currently active layers. ' +
                'The floating legend can be minimized using the minus sign. <br>' +
                'At the bottom center of the map, the scale bar and the mouse position are located. The scale bar ' +
                'shows the current scale of the map view and changes when the map is zoomed. The mouse position shows ' +
                'the longitude/latitude of the mouse position. ' +
                '</div><span class="wizard_navigation">Step 6 of 8' +
                '</span><br>'
            },
            {
                id: 'card-6',
                html: '<h2>The Toolbar</h2><div class="wizardtxt">The Toolbar, located above the Map ' +
                'Panel, has option to control the map, and read more about the tool.<br>' +
                'Hover your mouse cursor on each tool buttons to read what they do.' +
                '</div><span class="wizard_navigation">Step 7 of 8' +
                '</span><br>'
            },
            {
                id: 'card-last',
                html: '<h2>Quick Start Guide Complete!</h2>' +
                '<div class="wizardtxt">Close this window to start using the application.' +
                'You can run this quick start guide by clicking on this ' +
                '<img src="assets/images/help.png"> toolbar button.</div><span class="wizard_navigation">Step 8 of 8' +
                '</span>'
            }
        ]
    });

    var help_popup = new Ext.Window({
        extend: 'Ext.window.Window',
        title: 'Quick Start Guide',
        frame: true,
        width: 500,
        height: 300,
        listeners: {
            close: function () {
                reset_opacity();
                if (NorthPanel.collapsed === false){
                    legend_popup.hide();
                }
            }
        },
        items: [help_wizard]
    });
    help_popup.show();
}

Ext.require('Ext.util.Cookies');
var delay_popup_guide = new Ext.util.DelayedTask(function(){
    if (Ext.util.Cookies.get('help_read') !=='yes') {
        show_help_wizard();
    }
    var myCookie = Ext.util.Cookies.set('help_read', 'yes');
});

//
//var delay_popup_announcement = new Ext.util.DelayedTask(function(){
//    if (Ext.util.Cookies.get('announcement_read') !=='yes') {
//        announce_win = new Ext.Window ({
//            width:300,
//            id:'announce_id',
//            autoScroll:true,
//            title: 'Announcement',
//            html: 'The atlas is now available for download! You can get it in the ' +
//            '<button id="show_atlas">Downloads window</button> under <strong>Atlas</strong>. '
//        }).show();
//        announce_win.anchorTo("header_id", "tr", [-305, 0]);
//
//        Ext.get('show_atlas').on('click', function (e, t) {
//            NorthPanel.expand();
//            DownloadGrid.getStore().filter('component', "Atlas");
//            Ext.getCmp('component_id').setValue("Atlas");
//            announce_win.hide();
//        });
//    }
//
//    var myCookie2 = Ext.util.Cookies.set('announcement_read', 'yes');
//});
//var closeWithDelay = new Ext.util.DelayedTask(function(){
//    if (Ext.util.Cookies.get('announcement_read') =='yes') {
//        if (typeof announce_win !== "undefined"){
//            announce_win.hide(); // or destroy
//        }
//    }
//
//});


Ext.onReady(function(){
    delay_popup_guide.delay(7000);

    announce_win = new Ext.Window ({
        width:300,
        id:'announce_id',
        autoScroll:true,
        title: 'Announcement',
        html: 'The atlas is now available for download! You can get it in the ' +
        '<button id="show_atlas">Downloads window</button> under <strong>Atlas</strong>. '
    }).show();
    announce_win.anchorTo("header_id", "tr", [-305, 0]);
    Ext.get('show_atlas').on('click', function (e, t) {
        NorthPanel.expand();
        DownloadGrid.getStore().filter('component', "Atlas");
        Ext.getCmp('component_id').setValue("Atlas");
        downloads_generator ();
        announce_win.hide();
    });
});



Ext.require([
    'GeoExt.container.WmsLegend'
]);

Ext.define('VulnerabilityTool.controller.WebMapping.ButonOnclickActions',
{
    extend: 'Ext.app.Controller',
	stores:	[],
	views: 	[],

    init: function()
	{
		
        this.control(
		{
            'WebMappingViewport combobox[id=admin_level_id]':
            {
                change: function(cb, newV, oldV) {
                    change_layers(newV, oldV);
                }

            },
            'WebMappingViewport button[action=generate_vul_index]':
            {
                click:function(){
                    generate_vul_index ();
                }

            },
            'MapPanel button[action=download_action]':

            {
                click: function ()
                {
                    NorthPanel.toggleCollapse(true);
                    NorthPanel.expand();
                    downloads_generator();

                }
            },
			'MapPanel button[action=map_zoom_in]':
			{
                click:function()
				{	
					zoomInCtrl.trigger();
                }
            },
			'MapPanel button[action=map_zoom_out]':
			{
                click:function()
				{	
					zoomOutCtrl.trigger();
                }
            },
			'MapPanel button[action=navigation_history_previous]':
			{
                click:function()
				{	
					navigationHistoryCtrl.previousTrigger();
                }
            },
			'MapPanel button[action=navigation_history_next]':
			{
                click:function()
				{	
					navigationHistoryCtrl.nextTrigger();
                }
            },
            'MapPanel button[action=print]':
            {
                click:function()
                {
                    if( (typeof printPopup === 'undefined') || (printPopup.hidden===true)  ){
                        print_map();
                    }
                    else{
                        return false;
                    }

                }
            },
			'MapPanel button[action=about_us]':
			{
				click: function ()
				{
                    if( (typeof about === 'undefined') || (about.hidden===true)  ){
                        about = new Ext.Window ({
                            width:500,
                            height:400,
                            autoScroll:true,
                            maximizable: true,
                            title: 'About the Application',
                            autoLoad:{
                                url:'assets/pages/about.html'
                            }
                        });
                        about.show();
                    }
                    else{
                        return false;
                    }

				}
			},
			'MapPanel button[action=useful_links]':
			{
				click: function ()
				{
                    if( (typeof links === 'undefined') || (links.hidden===true)  ){
                        links = new Ext.Window({
                            width:350,
                            autoScroll:true,
                            title: 'Useful Links',
                            autoLoad:{
                                url:'assets/pages/useful_links.html'
                            }
                        });
                        links.show();
                    }
                    else{
                        return false;
                    }

				}
			},
            'MapPanel button[action=add_photos]':
            {
                click: function ()
                {
                    var win = window.open('admin/', '_blank');
                    win.focus();

                }
            },
	 		'MapPanel button[action=hide_layers_action]':

            {
                click: function() {
                    var hideShow = Ext.getCmp("hide_show_id");
                    if (layersHidden===false){
                        for (var i = config.no_of_baselayers; i < map.layers.length; i++) {
                            map.layers[i].setVisibility(false);
                        }
                        layersHidden = true;

                        hideShow.setIcon('assets/images/show.png');
                    }
                    else{
                        for (var i = config.no_of_baselayers; i < map.layers.length; i++) {
                            map.layers[i].setVisibility(true);
                        }
                        hideShow.setIcon('assets/images/hide.png');
                        layersHidden= false;
                    }
				}

			},
			'MapPanel button[action=help]':
			{
				click: function ()
				{
                    if( (typeof help_popup === 'undefined') || ( help_popup.hidden===true)  ){
                        show_help_wizard();
                    }
                    else {
                        return false;
                    }

				}
			}, 
			'MapPanel button[action=map_default_map_extent]':
			{
				click: function() 
				{
					map.setCenter(new OpenLayers.LonLat(34.53,-13.28).transform(
						new OpenLayers.Projection("EPSG:4326"),
						map.getProjectionObject()
					),7 );
				}
			}


		});
			
        
    }
	
});


//Start php session and clean unneeded files.
Ext.onReady(function(){
    //
    //Ext.Ajax.request({
    //    url:'data/include/SessionStarter.php',
    //    async:false,
    //    method:'POST',
    //    success: function(result) {
    //        session_id = result.responseText;
    //        console.log(session_id);
    //        console.log("Session started.");
    //    },
    //    failure: function(error){
    //        session_id_error = error.responseText;
    //        console.log(session_id_error);
    //        console.log("Session start failed.");
    //    }
    //});
    window_unload = function(e) {

        Ext.Ajax.request({
            url:'data/webmapping/CleanupLayersViews.php',
            async:false,
            method:'POST',
            success: function(result) {
                messages = result.responseText;
                console.log(messages);
                console.log("Unwanted data cleaned.");
            },
            failure: function(error){
                session_id_error = error.responseText;
                console.log(session_id_error);
                console.log("Unwanted data couldn't be cleaned.");
            }
        });
    };


    if (window.addEventListener) {
        window.addEventListener('unload', window_unload, false);
    } else if (window.attachEvent) {
        window.attachEvent('onunload', window_unload);
    } else {
        throw "Cannot attach event handler";
    }
});
