Ext.define("Ext.selection.TreeModel",{extend:"Ext.selection.RowModel",alias:"selection.treemodel",constructor:function(){this.callParent(arguments);this.pruneRemoved&&(this.pruneRemoved=!1,this.pruneRemovedNodes=!0)},bindStore:function(){var n=this;n.callParent(arguments);n.pruneRemovedNodes&&n.view.mon(n.treeStore,{remove:n.onNodeRemove,scope:n})},onNodeRemove:function(n,t,i){i||this.deselectDeletedRecords([t])},onKeyRight:function(n,t){this.navExpand(n,t)},navExpand:function(n,t){var i=this.getLastFocused(),r=this.view;if(i)if(i.isExpanded())this.onKeyDown(n,t);else i.isExpandable()&&(r.isTreeView||(r=r.lockingPartner),r.expand(i))},onKeyLeft:function(n,t){this.navCollapse(n,t)},navCollapse:function(n){var r=this,i=this.getLastFocused(),u=this.view,t;i&&(t=i.parentNode,i.isExpanded()?(u.isTreeView||(u=u.lockingPartner),u.collapse(i)):t&&!t.isRoot()&&(n.shiftKey?(r.selectRange(t,i,n.ctrlKey,"up"),r.setLastFocused(t)):n.ctrlKey?r.setLastFocused(t):r.select(t)))},onKeySpace:function(n){n.record.data.checked!=null?this.toggleCheck(n):this.callParent(arguments)},onKeyEnter:function(n){n.record.data.checked!=null?this.toggleCheck(n):this.callParent(arguments)},toggleCheck:function(n){var t=this.view,i=this.getLastSelected();if(n.stopEvent(),i){t.isTreeView||(t=t.lockingPartner);t.onCheckChange(i)}}})