Ext.define("Ext.ElementLoader",{mixins:{observable:"Ext.util.Observable"},uses:["Ext.data.Connection","Ext.Ajax"],statics:{Renderer:{Html:function(n,t,i){return n.getTarget().update(t.responseText,i.scripts===!0),!0}}},url:null,params:null,baseParams:null,autoLoad:!1,target:null,loadMask:!1,ajaxOptions:null,scripts:!1,isLoader:!0,constructor:function(n){var t=this,i;n=n||{};Ext.apply(t,n);t.setTarget(t.target);t.addEvents("beforeload","exception","load");t.mixins.observable.constructor.call(t);t.autoLoad&&(i=t.autoLoad,i===!0&&(i={}),t.load(i))},setTarget:function(n){var t=this;n=Ext.get(n);t.target&&t.target!=n&&t.abort();t.target=n},getTarget:function(){return this.target||null},abort:function(){var n=this.active;n!==undefined&&(Ext.Ajax.abort(n.request),n.mask&&this.removeMask(),delete this.active)},removeMask:function(){this.target.unmask()},addMask:function(n){this.target.mask(n===!0?null:n)},load:function(n){this.target||Ext.Error.raise("A valid target is required when loading content");n=Ext.apply({},n);var t=this,i=Ext.isDefined(n.loadMask)?n.loadMask:t.loadMask,r=Ext.apply({},n.params),u=Ext.apply({},n.ajaxOptions),f=n.callback||t.callback,e=n.scope||t.scope||t;(Ext.applyIf(u,t.ajaxOptions),Ext.applyIf(n,u),Ext.applyIf(r,t.params),Ext.apply(r,t.baseParams),Ext.applyIf(n,{url:t.url}),n.url||Ext.Error.raise("You must specify the URL from which content should be loaded"),Ext.apply(n,{scope:t,params:r,callback:t.onComplete}),t.fireEvent("beforeload",t,n)!==!1)&&(i&&t.addMask(i),t.active={options:n,mask:i,scope:e,callback:f,success:n.success||t.success,failure:n.failure||t.failure,renderer:n.renderer||t.renderer,scripts:Ext.isDefined(n.scripts)?n.scripts:t.scripts},t.active.request=Ext.Ajax.request(n),t.setOptions(t.active,n))},setOptions:Ext.emptyFn,onComplete:function(n,t,i){var r=this,u=r.active,f;u&&(f=u.scope,t&&(t=r.getRenderer(u.renderer).call(r,r,i,u)!==!1),t?(Ext.callback(u.success,f,[r,i,n]),r.fireEvent("load",r,i,n)):(Ext.callback(u.failure,f,[r,i,n]),r.fireEvent("exception",r,i,n)),Ext.callback(u.callback,f,[r,t,i,n]),u.mask&&r.removeMask());delete r.active},getRenderer:function(n){return Ext.isFunction(n)?n:this.statics().Renderer.Html},startAutoRefresh:function(n,t){var i=this;i.stopAutoRefresh();i.autoRefresh=setInterval(function(){i.load(t)},n)},stopAutoRefresh:function(){clearInterval(this.autoRefresh);delete this.autoRefresh},isAutoRefreshing:function(){return Ext.isDefined(this.autoRefresh)},destroy:function(){var n=this;n.stopAutoRefresh();delete n.target;n.abort();n.clearListeners()}})