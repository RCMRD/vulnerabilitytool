Ext.define("Ext.ComponentLoader",{extend:"Ext.ElementLoader",statics:{Renderer:{Data:function(n,t){var i=!0;try{n.getTarget().update(Ext.decode(t.responseText))}catch(r){i=!1}return i},Component:function(n,t,i){var u=!0,r=n.getTarget(),f=[];r.isContainer||Ext.Error.raise({target:r,msg:"Components can only be loaded into a container"});try{f=Ext.decode(t.responseText)}catch(e){u=!1}return u&&(r.suspendLayouts(),i.removeAll&&r.removeAll(),r.add(f),r.resumeLayouts(!0)),u}}},target:null,loadMask:!1,renderer:"html",setTarget:function(n){var t=this;Ext.isString(n)&&(n=Ext.getCmp(n));t.target&&t.target!=n&&t.abort();t.target=n},removeMask:function(){this.target.setLoading(!1)},addMask:function(n){this.target.setLoading(n)},setOptions:function(n,t){n.removeAll=Ext.isDefined(t.removeAll)?t.removeAll:this.removeAll},getRenderer:function(n){if(Ext.isFunction(n))return n;var t=this.statics().Renderer;switch(n){case"component":return t.Component;case"data":return t.Data;default:return Ext.ElementLoader.Renderer.Html}}})