Ext.define("Ext.util.Animate",{requires:["Ext.Element","Ext.CompositeElementLite","Ext.fx.Manager","Ext.fx.Anim"],isAnimate:!0,animate:function(n){var t=this;return Ext.fx.Manager.hasFxBlock(t.id)?t:(Ext.fx.Manager.queueFx(new Ext.fx.Anim(t.anim(n))),this)},anim:function(n){if(!Ext.isObject(n))return n?{}:!1;var t=this;return n.stopAnimation&&t.stopAnimation(),Ext.applyIf(n,Ext.fx.Manager.getFxDefaults(t.id)),Ext.apply({target:t,paused:!0},n)},stopFx:Ext.Function.alias(Ext.util.Animate,"stopAnimation"),stopAnimation:function(){return Ext.fx.Manager.stopAnimation(this.id),this},syncFx:function(){return Ext.fx.Manager.setFxDefaults(this.id,{concurrent:!0}),this},sequenceFx:function(){return Ext.fx.Manager.setFxDefaults(this.id,{concurrent:!1}),this},hasActiveFx:Ext.Function.alias(Ext.util.Animate,"getActiveAnimation"),getActiveAnimation:function(){return Ext.fx.Manager.getActiveAnimation(this.id)}},function(){Ext.applyIf(Ext.Element.prototype,this.prototype);Ext.CompositeElementLite.importElementMethods()})