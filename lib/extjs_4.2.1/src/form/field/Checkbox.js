Ext.define("Ext.form.field.Checkbox",{extend:"Ext.form.field.Base",alias:["widget.checkboxfield","widget.checkbox"],alternateClassName:"Ext.form.Checkbox",requires:["Ext.XTemplate","Ext.form.CheckboxManager"],componentLayout:"field",stretchInputElFixed:!1,childEls:["boxLabelEl"],fieldSubTpl:["<tpl if=\"boxLabel && boxLabelAlign == 'before'\">","{beforeBoxLabelTpl}",'<label id="{cmpId}-boxLabelEl" {boxLabelAttrTpl} class="{boxLabelCls} {boxLabelCls}-{boxLabelAlign}" for="{id}">',"{beforeBoxLabelTextTpl}","{boxLabel}","{afterBoxLabelTextTpl}","<\/label>","{afterBoxLabelTpl}","<\/tpl>",'<input type="{inputTypeAttr}" id="{id}" {inputAttrTpl}','<tpl if="tabIdx"> tabIndex="{tabIdx}"<\/tpl>','<tpl if="disabled"> disabled="disabled"<\/tpl>','<tpl if="fieldStyle"> style="{fieldStyle}"<\/tpl>','<tpl if="ariaAttrs"> {ariaAttrs}<\/tpl>',' class="{fieldCls} {typeCls} {inputCls} {childElCls}" autocomplete="off" hidefocus="true" />',"<tpl if=\"boxLabel && boxLabelAlign == 'after'\">","{beforeBoxLabelTpl}",'<label id="{cmpId}-boxLabelEl" {boxLabelAttrTpl} class="{boxLabelCls} {boxLabelCls}-{boxLabelAlign}" for="{id}">',"{beforeBoxLabelTextTpl}","{boxLabel}","{afterBoxLabelTextTpl}","<\/label>","{afterBoxLabelTpl}","<\/tpl>",{disableFormats:!0,compiled:!0}],subTplInsertions:["beforeBoxLabelTpl","afterBoxLabelTpl","beforeBoxLabelTextTpl","afterBoxLabelTextTpl","boxLabelAttrTpl","inputAttrTpl"],isCheckbox:!0,focusCls:"form-checkbox-focus",extraFieldBodyCls:Ext.baseCSSPrefix+"form-cb-wrap",checked:!1,checkedCls:Ext.baseCSSPrefix+"form-cb-checked",boxLabelCls:Ext.baseCSSPrefix+"form-cb-label",boxLabelAlign:"after",inputValue:"on",checkChangeEvents:[],inputType:"checkbox",inputTypeAttr:"button",onRe:/^on$/i,inputCls:Ext.baseCSSPrefix+"form-cb",initComponent:function(){this.callParent(arguments);this.getManager().add(this)},initValue:function(){var n=this,t=!!n.checked;n.originalValue=n.lastValue=t;n.setValue(t)},getElConfig:function(){var n=this;return n.isChecked(n.rawValue,n.inputValue)&&n.addCls(n.checkedCls),n.callParent()},getFieldStyle:function(){return Ext.isObject(this.fieldStyle)?Ext.DomHelper.generateStyles(this.fieldStyle):this.fieldStyle||""},getSubTplData:function(){var n=this;return Ext.apply(n.callParent(),{disabled:n.readOnly||n.disabled,boxLabel:n.boxLabel,boxLabelCls:n.boxLabelCls,boxLabelAlign:n.boxLabelAlign,inputTypeAttr:n.inputTypeAttr})},initEvents:function(){var n=this;n.callParent();n.mon(n.inputEl,"click",n.onBoxClick,n)},setBoxLabel:function(n){var t=this;t.boxLabel=n;t.rendered&&t.boxLabelEl.update(n)},onBoxClick:function(){var n=this;n.disabled||n.readOnly||this.setValue(!this.checked)},getRawValue:function(){return this.checked},getValue:function(){return this.checked},getSubmitValue:function(){var n=this.uncheckedValue,t=Ext.isDefined(n)?n:null;return this.checked?this.inputValue:t},isChecked:function(n,t){return n===!0||n==="true"||n==="1"||n===1||((Ext.isString(n)||Ext.isNumber(n))&&t?n==t:this.onRe.test(n))},setRawValue:function(n){var t=this,r=t.inputEl,i=t.isChecked(n,t.inputValue);return r&&t[i?"addCls":"removeCls"](t.checkedCls),t.checked=t.rawValue=i,i},setValue:function(n){var t=this,r,i,f,u;if(Ext.isArray(n))for(r=t.getManager().getByName(t.name,t.getFormId()).items,f=r.length,i=0;i<f;++i)u=r[i],u.setValue(Ext.Array.contains(n,u.inputValue));else t.callParent(arguments);return t},valueToRaw:function(n){return n},onChange:function(n){var t=this,i=t.handler;i&&i.call(t.scope||t,t,n);t.callParent(arguments)},resetOriginalValue:function(n){var t=this,r,u,f,i;if(!n)for(r=t.getManager().getByName(t.name,t.getFormId()).items,f=r.length,i=0;i<f;++i)u=r[i],u!==t&&r[i].resetOriginalValue(!0);t.callParent()},beforeDestroy:function(){this.callParent();this.getManager().removeAtKey(this.id)},getManager:function(){return Ext.form.CheckboxManager},onEnable:function(){var n=this,t=n.inputEl;n.callParent();t&&(t.dom.disabled=n.readOnly)},setReadOnly:function(n){var t=this,i=t.inputEl;i&&(i.dom.disabled=!!n||t.disabled);t.callParent(arguments)},getFormId:function(){var n=this,t;return n.formId||(t=n.up("form"),t&&(n.formId=t.id)),n.formId}})