Ext.define("Ext.menu.CheckItem",{extend:"Ext.menu.Item",alias:"widget.menucheckitem",checkedCls:Ext.baseCSSPrefix+"menu-item-checked",uncheckedCls:Ext.baseCSSPrefix+"menu-item-unchecked",groupCls:Ext.baseCSSPrefix+"menu-group-icon",hideOnClick:!1,checkChangeDisabled:!1,childEls:["itemEl","iconEl","textEl","checkEl"],showCheckbox:!0,renderTpl:['<tpl if="plain">',"{text}","<tpl else>","{%var showCheckbox = values.showCheckbox,",'      rightCheckbox = showCheckbox && values.hasIcon && (values.iconAlign !== "left"), textCls = rightCheckbox ? "'+Ext.baseCSSPrefix+'right-check-item-text" : "";%}','<a id="{id}-itemEl" class="'+Ext.baseCSSPrefix+'menu-item-link{childElCls}" href="{href}" <tpl if="hrefTarget">target="{hrefTarget}"<\/tpl> hidefocus="true" unselectable="on"','<tpl if="tabIndex">',' tabIndex="{tabIndex}"',"<\/tpl>",">",'{%if (values.hasIcon && (values.iconAlign !== "left")) {%}','<div role="img" id="{id}-iconEl" class="'+Ext.baseCSSPrefix+"menu-item-icon {iconCls}",'{childElCls} {glyphCls}" style="<tpl if="icon">background-image:url({icon});<\/tpl>','<tpl if="glyph && glyphFontFamily">font-family:{glyphFontFamily};<\/tpl>">','<tpl if="glyph">&#{glyph};<\/tpl>',"<\/div>","{%} else if (showCheckbox){%}",'<img id="{id}-checkEl" src="{blank}" class="'+Ext.baseCSSPrefix+'menu-item-icon{childElCls}" />',"{%}%}",'<span id="{id}-textEl" class="'+Ext.baseCSSPrefix+'menu-item-text {[textCls]}{childElCls}" <tpl if="arrowCls">style="margin-right: 17px;"<\/tpl> >{text}<\/span>',"{%if (rightCheckbox) {%}",'<img id="{id}-checkEl" src="{blank}" class="'+Ext.baseCSSPrefix+'menu-item-icon-right{childElCls}" />',"{%} else if (values.arrowCls) {%}",'<img id="{id}-arrowEl" src="{blank}" class="{arrowCls}{childElCls}"/>',"{%}%}","<\/a>","<\/tpl>"],initComponent:function(){var n=this;n.checked=!!n.checked;n.addEvents("beforecheckchange","checkchange");n.callParent(arguments);Ext.menu.Manager.registerCheckable(n);n.group&&(n.showCheckbox=!1,n.iconCls||n.icon||n.glyph||(n.iconCls=n.groupCls),n.initialConfig.hideOnClick!==!1&&(n.hideOnClick=!0))},beforeRender:function(){this.callParent();this.renderData.showCheckbox=this.showCheckbox},afterRender:function(){var n=this;n.callParent();n.checked=!n.checked;n.setChecked(!n.checked,!0);n.checkChangeDisabled&&n.disableCheckChange()},disableCheckChange:function(){var n=this,t=n.checkEl;t&&t.addCls(n.disabledCls);Ext.isIE10p||Ext.isIE9&&Ext.isStrict||!n.rendered||n.el.repaint();n.checkChangeDisabled=!0},enableCheckChange:function(){var n=this,t=n.checkEl;t&&t.removeCls(n.disabledCls);n.checkChangeDisabled=!1},onClick:function(n){var t=this;t.disabled||t.checkChangeDisabled||t.checked&&t.group||t.setChecked(!t.checked);this.callParent([n])},onDestroy:function(){Ext.menu.Manager.unregisterCheckable(this);this.callParent(arguments)},setChecked:function(n,t){var i=this;if(i.checked!==n&&(t||i.fireEvent("beforecheckchange",i,n)!==!1)){i.el&&i.el[n?"addCls":"removeCls"](i.checkedCls)[n?"removeCls":"addCls"](i.uncheckedCls);i.checked=n;Ext.menu.Manager.onCheckChange(i,n);t||(Ext.callback(i.checkHandler,i.scope,[i,n]),i.fireEvent("checkchange",i,n))}}})