Ext.define("Ext.grid.CellEditor",{extend:"Ext.Editor",constructor:function(n){n=Ext.apply({},n);n.field&&(n.field.monitorTab=!1);this.callParent([n])},onShow:function(){var n=this,t=n.boundEl.first();t&&(n.isForTree&&(t=t.child(n.treeNodeSelector)),t.hide());n.callParent(arguments)},onHide:function(){var n=this,t=n.boundEl.first();t&&(n.isForTree&&(t=t.child(n.treeNodeSelector)),t.show());n.callParent(arguments)},afterRender:function(){var n=this,t=n.field;n.callParent(arguments);t.isCheckbox&&t.mon(t.inputEl,{mousedown:n.onCheckBoxMouseDown,click:n.onCheckBoxClick,scope:n})},onCheckBoxMouseDown:function(){this.completeEdit=Ext.emptyFn},onCheckBoxClick:function(){delete this.completeEdit;this.field.focus(!1,10)},realign:function(n){var t=this,i=t.boundEl,f=i.first(),r=i.getWidth(),e=Ext.Array.clone(t.offsets),o=t.grid,u;t.isForTree&&(u=t.getTreeNodeOffset(f),r-=Math.abs(u),e[0]+=u);o.columnLines&&(r-=i.getBorderWidth("rl"));n===!0&&t.field.setWidth(r);t.alignTo(f,t.alignment,e)},getTreeNodeOffset:function(n){return n.child(this.treeNodeSelector).getOffsetsTo(n)[0]},onEditorTab:function(n){var t=this.field;if(t.onEditorTab)t.onEditorTab(n)},alignment:"l-l",hideEl:!1,cls:Ext.baseCSSPrefix+"small-editor "+Ext.baseCSSPrefix+"grid-editor "+Ext.baseCSSPrefix+"grid-cell-editor",treeNodeSelector:"."+Ext.baseCSSPrefix+"tree-node-text",shim:!1,shadow:!1})