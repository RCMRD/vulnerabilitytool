Ext.define("Ext.data.Tree",{alias:"data.tree",mixins:{observable:"Ext.util.Observable"},root:null,constructor:function(n){var t=this;t.mixins.observable.constructor.call(t);n&&t.setRootNode(n);t.on({scope:t,idchanged:t.onNodeIdChanged,insert:t.onNodeInsert,append:t.onNodeAppend,remove:t.onNodeRemove})},getRootNode:function(){return this.root},setRootNode:function(n){var t=this;return t.root=n,n.rootOf?n.rootOf.removeRootNode():n.parentNode&&n.parentNode.removeChild(n),n.rootOf=t,n.fireEventArgs("beforeappend",[null,n])!==!1&&(n.set("root",!0),n.updateInfo(!0,{isFirst:!0,isLast:!0,depth:0,index:0,parentId:null}),t.nodeHash={},n.fireEvent("append",null,n),n.fireEvent("rootchange",n)),n},removeRootNode:function(){var t=this,n=t.root;return n.set("root",!1),n.fireEvent("remove",null,n,!1),n.fireEvent("rootchange",null),n.rootOf=t.root=null,n},flatten:function(){return Ext.Object.getValues(this.nodeHash)},onNodeInsert:function(n,t){this.registerNode(t,!0)},onNodeAppend:function(n,t){this.registerNode(t,!0)},onNodeRemove:function(n,t){this.unregisterNode(t,!0)},onNodeIdChanged:function(n,t,i,r){var u=this.nodeHash;u[n.internalId]=n;delete u[r]},getNodeById:function(n){return this.nodeHash[n]},registerNode:function(n,t){var u=this,r,f,i;if(u.nodeHash[n.internalId]=n,t===!0)for(r=n.childNodes,f=r.length,i=0;i<f;i++)u.registerNode(r[i],!0)},unregisterNode:function(n,t){var u=this,r,f,i;if(delete u.nodeHash[n.internalId],t===!0)for(r=n.childNodes,f=r.length,i=0;i<f;i++)u.unregisterNode(r[i],!0)},sort:function(n,t){this.getRootNode().sort(n,t)},filter:function(n,t){this.getRootNode().filter(n,t)}})