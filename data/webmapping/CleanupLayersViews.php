<?php
require_once("../include/SessionStarter.php");
require_once ('../include/DBConnection.class.php');
require_once ('../geoserver/GeoserverWrapper.php');
require_once ('../../Config.php');

/**
 * Class SessionFiles gets all session name by scanning through the session files in php session save path.
 */
class SessionFiles
{
    public function listAllFiles()
    {
        $matches = [];
        $sessionFiles=[];
        $sessionDir = ini_get('session.save_path');
        foreach (new DirectoryIterator($sessionDir) as $folderInfo) {
            if (!$folderInfo->isDot() && $folderInfo->isFile()) { //If fold is a file and not a dot. execute the following.
                //Set the pattern based on the session file name
                if (strpos('PHPSESSID', $folderInfo->getFileName())) {
                    $pattern = '/^PHPSESSID_./';
                }elseif (strpos('sess', $folderInfo->getFileName())){
                    $pattern = '/^sess_./';
                }
                else{
                    $pattern = '/^sess_./';
                }
                //Reun regex with file name
                preg_match($pattern, $folderInfo->getFileName(), $matches);
                if ($matches) {//If match is true
                    if ($pattern == '/^sess_./') {
                        $sessionFiles[]= substr($folderInfo->getFileName(), 5);
                    }
                    else {
                        $sessionFiles[]= substr($folderInfo->getFileName(), 10);
                    }

                }
            }
        }
        return $sessionFiles;
    }
}


class ListSessionDir {
    public $downloadPath;
    public $sessionID;
    public $userDir;
    public function deleteDownloadDir($level, $sessionDirKey) {

        $this->sessionID = 'v'.$sessionDirKey;
        //echo $this->sessionID;
        $this->downloadPath =  "../downloads/".$level."/vulnerability/";
        $this->userDir = $this->downloadPath.$this->sessionID.'/';
        $files = glob($this->userDir.'*');
        foreach($files as $file) {
            if (is_file($file)) {
                unlink($file);
            }
        }
        if (file_exists($this->userDir)) {
            rmdir($this->userDir);
            echo "The folder ". $this->userDir. " is deleted.";
        }
        else {
            echo "The folder ". $this->userDir. " doesn't exist.";
        }
    }

}

/**
 * Class DropSessionViews gets all views and delete the found views by view keyword
 */

class DropSessionViews {
    /*
     * LayerViews Gets all associated db views for a given view key.
     */
    public function LayerViews($viewKey){

            $db = dbConn::getConnection();

            $getQuery = "SELECT viewname
                FROM pg_catalog.pg_views
                WHERE viewname  !~  '(_1|_12)$'
                AND viewname ~ '^".$viewKey."'";
            $result = $db->query($getQuery);
            $LayerViews= [];
            while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
                $LayerViews[] = $row['viewname'];
            }

            return $LayerViews;


    }
    /*
     * dropViews Drops all with the supplied view key
     */
    public function dropViews($viewKey){
        $db = dbConn::getConnection();

            $dropQuery = "SELECT 'DROP VIEW ' || t.oid::regclass || ';' AS drop
                        FROM   pg_class t
                        JOIN   pg_namespace n ON n.oid = t.relnamespace
                        WHERE  t.relkind = 'v'
                           AND t.relname LIKE '".$viewKey."'
                        AND    n.nspname = 'public' -- select by schema(s)
                        ORDER BY relname;";
            $result = $db->query($dropQuery);
            $views= [];
            while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
                $finalDrop = $row['drop'];
                $views[] = $row['drop'];
                $db->query($finalDrop);
                echo "View ".substr($row['drop'], 10)." Deleted. \n";
            }
            return $views;

    }
}

/**
 * Class DeleteSessionLayers Deletes all geoserver layers
 */

class DeleteSessionLayers {
    /*
     * deleteLayers deletes layers with a supplied Layer list.
     */
    public function deleteLayers($layerLists){
        $config = new Config();
        $geoserver = new GeoserverWrapper($config->geoserverUrl, $config->geoserverUsername, $config->geoserverPassword);
        foreach ($layerLists as $Layer){
            $geoserver->deleteLayer($Layer, 'malawi_vulnerabilitytool', $Layer);
            $geoserver->deleteDataStore($Layer, 'malawi_vulnerabilitytool');
            echo "Deleted layer and store: ".$Layer."\n";
        }
    }
}

/**
 * Class OldViews get all views that are not actively being used by a user. These views does not have associated
 * session file in php session path.
 */
class OldViews {
    public function getOldViews() {
        $db = dbConn::getConnection();
        $selectCustomViews = "SELECT table_name
          FROM INFORMATION_SCHEMA.views
          WHERE table_schema = ANY (current_schemas(false))
          AND table_name LIKE 'v%';";
        $query = $db->query($selectCustomViews);

        $customViews = [];
        while( $rows = $query->fetch(PDO::FETCH_ASSOC)) {
            $explodeCustom = explode('_', substr($rows['table_name'], 1) );
            $customViews[] =$explodeCustom[0];
        }

        $Session = new SessionFiles();
        $sessionFiles = $Session->listAllFiles();

        $oldViews = array_diff($customViews, $sessionFiles);
        return $oldViews;
    }
}
$sessionDir = new ListSessionDir();

$remove = new DeleteSessionLayers();

$drop = new DropSessionViews();

$oldViews = new OldViews();

$config = new Config();


////// Delete currently expiring session views, download directories, and layers
$Layers=$drop->layerViews('v'.session_id());
$remove->deleteLayers($Layers);
$drop->dropViews('v'.session_id().'%');
foreach ($config->levels as $level) {
    $sessionDir->deleteDownloadDir($level, session_id());
}


////// Delete old session views, download directories, and layers
//Run this command every 24 hrs.
$unusedViews = $oldViews->getOldViews();

foreach ($unusedViews as $unusedView) {
    $LayersOld=$drop->layerViews('v'.$unusedView);
    $remove->deleteLayers($LayersOld);
    $drop->dropViews('v'.$unusedView.'%');
    foreach ($config->levels as $level) {
        $sessionDir->deleteDownloadDir($level, $unusedView);
    }
}


?>