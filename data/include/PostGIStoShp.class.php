<?php
require_once("SessionStarter.php");

require_once ('../../Config.php');
include('../include/Misc.class.php');
ini_set('max_execution_time', 6000); //Set maximum excution time of the script to 6000 seconds = 1hr

ini_set('memory_limit', '1024M');
/**
 * class ExportShp Exports a selected database query as a shapefile if the file doesn't already exist.
 */
class ExportShp
{
    public $userDir;
    public $userPath;
	public $FileName;
	public $Path;
	public $ZipOutput;
/*
   * Generate selected database query as a shapefile if the file doesn't already exist.
   */
	public function Generate ($CurrentViewName, $level, $component)	{
        $config = new Config();

        $this->userDir= 'v'.session_id();
        $this->FileName = 'custom_vulnerability_'.substr($CurrentViewName,-13).'.shp';
        $this->Path = '../downloads/'.$level.'/'.$component.'/';
        //echo $this->Path;
        $this->userPath = $this->Path.$this->userDir.'/';
        $this->ZipOutput =  $this->userPath.'malawi_'.$level.'_'.$this->FileName.'.zip';
        //echo $this->ZipOutput;
        if (!file_exists($this->userPath)) {
            mkdir($this->userPath, 0777, true);
        }
            //if the zip 	file already exists and overwrite is false, return false
            if (file_exists($this->ZipOutput)) {
                return;
            }
            else {
                $Query = "SELECT * FROM ".$CurrentViewName;
                //echo $Query;
                $ExportShp = exec('pgsql2shp -f "' .  $this->userPath . $this->FileName .
                    '" -u '.$config->pgsqlUser.' -P '.$config->pgsqlPassword.' -p '.$config->pgsqlPort.' -g geom -h '.
                    $config->pgsqlHost.' '. $config->pgsqlDb.' "' . $Query .
                    '" 2>&1', $output, $return);

                if ($return !== 0) {
                   return "Failed";
                }
            }

	}

}

/**
*class PrepareFiles Select all shape related files ready to be added in zip.
*/
class PrepareFiles extends ExportShp
{
	public $Zipable;
	public $fileKey;
    /*
     * Gets files with the same file names from a directory except those ending with .shp.zip.
     * @return array.
     */
	public function get($CurrentViewName, $level, $component) {
        if(parent::Generate($CurrentViewName, $level, $component) !=="Failed") {

            $this->Zipable = array();
            $this->fileKey =  substr($this->FileName,0, -4); //File name without .shp

            $matches=array();
            $pattern = '/^'.$this->fileKey.'(?!(\.shp\.zip))/';

            foreach (new DirectoryIterator($this->userPath) as $folderInfo) {
                if ( !$folderInfo->isDot() && $folderInfo->isFile() ) {
                    preg_match($pattern, $folderInfo->getFileName(), $matches);
                    if ($matches) {
                        $this->Zipable[] = $this->userPath.$folderInfo->getFilename();
                    }
                }
            }
            return $this->Zipable;
        }

	}

}

/**
 * class ZipFiles Creates the zip file using a return from PrepareFiles.
 */
class ZipFiles
{
    /*
     * Creates the zip file using a return from PrepareFiles.
     */
    public function createZip($files, $destination) {
        //check to make sure the file exists
        if (file_exists($destination)) {
            echo "The shapefile is already generated. You can download the file by clicking the download".
                ' button below or using the files Downloader.<p></p><a class="download_button" href="data/'.
                substr($destination, 3) .'" download/>Download</a><p></p>';
            return;
        }
        else if ($destination==""){
            echo "Failed to Generate Shape file.";
        }
        else {
            //create the archive
            $zip = new ZipArchive();
            $zip->open($destination, ZipArchive::CREATE);
            //add the files
            foreach($files as $file) {
                $zip->addFile($file, basename($file) );
            }
            //add meta data and proj data file in zip
            $zip->close();
            echo "The shapefile is created successfully. You can download the file by clicking the download".
                ' button below or using the files Downloader.<p></p><a class="download_button" href="data/'.
                substr($destination, 3) .'" download/>Download</a><p></p>';
            foreach ($files as $file) {
                unlink($file);
            }

        }
    }


}



?>