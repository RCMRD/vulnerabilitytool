<?php
ini_set("display_errors", "On");
error_reporting(E_ALL);

class GeoserverWrapper {
	var $serverUrl = '';
	var $username = '';
	var $password = '';

// Internal stuff
	public function __construct($serverUrl, $username = '', $password = '') {
		if (substr($serverUrl, -1) !== '/') $serverUrl .= '/';
		$this->serverUrl = $serverUrl;
		$this->username = $username;
		$this->password = $password;
	}

	private function authGet($apiPath) {
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $this->serverUrl.$apiPath);
		curl_setopt($ch, CURLOPT_USERPWD, $this->username.":".$this->password); 
		curl_setopt($ch, CURLOPT_HEADER, false);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$rslt = curl_exec($ch);
		$info = curl_getinfo($ch);
		
		if ($info['http_code'] == 401) {
			return 'Access denied. Check login credentials.';
		} else {
			return $rslt;
		}
	}

	private function runApi($apiPath, $method = 'GET', $data = '', $contentType = 'text/xml') {
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $this->serverUrl.'rest/'.$apiPath);
		curl_setopt($ch, CURLOPT_USERPWD, $this->username.":".$this->password); 
		if ($method == 'POST') {
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
		} else if ($method == 'DELETE') {
            curl_setopt($ch, CURLOPT_POSTFIELDS,$data);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: text/xml") );
			curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
		}
        else if ($method == 'PUT') {
            curl_setopt($ch, CURLOPT_POSTFIELDS,$data);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: text/plain") );
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        }
		if ($data != '') {
			curl_setopt($ch, CURLOPT_HTTPHEADER, 
				array("Content-Type: $contentType")
			);
		}

		curl_setopt($ch, CURLOPT_HEADER, false);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$rslt = curl_exec($ch);
		$info = curl_getinfo($ch);
		
		if ($info['http_code'] == 401) {
			return 'Access denied. Check login credentials.';
		} else {
			return $rslt;
		}
	}

// Workspace APIs
	public function listWorkspaces() {
		return json_decode($this->runApi('workspaces.json'));
	}

	public function createWorkspace($workspaceName) {
		return $this->runApi('workspaces', 'POST', '<workspace><name>'.$workspaceName.'</name></workspace>');
	}

	public function deleteWorkspace($workspaceName) {
		return $this->runApi('workspaces/'.$workspaceName, 'DELETE');
	}

// Datastore APIs
	public function listDatastores($workspaceName) {
		return json_decode($this->runApi('workspaces/'.$workspaceName.'/datastores.json'));
	}

	public function createPostGISDataStore($datastoreName, $workspaceName, $databaseName, $databaseUser, $databasePass, $databaseHost, $databasePort, $geoserverUrl) {
		return $this->runApi('workspaces/'.$workspaceName.'/datastores', 'POST', '<dataStore>
			<name>'.$datastoreName.'</name>
			<type>PostGIS</type>
			<enabled>true</enabled>
			  <workspace>
                <name>' . $workspaceName . '</name>
                <atom:link xmlns:atom="http://www.w3.org/2005/Atom" rel="alternate" href="'.$geoserverUrl.'/rest/workspaces/'.$workspaceName.'.xml" type="application/xml"/>
              </workspace>
			<connectionParameters>
                <entry key="dbtype">postgis</entry>
				<entry key="host">' . $databaseHost . '</entry>
                <entry key="port">' .$databasePort. '</entry>


				<entry key="database">' .$databaseName. '</entry>

				<entry key="schema">public</entry>

				<entry key="user">' .$databaseUser . '</entry>
				<entry key="passwd">' . $databasePass. '</entry>

				<entry key="namespace">' . $workspaceName . '</entry>
				<entry key="Expose primary keys">false</entry>
                <entry key="max connections">10</entry>
				<entry key="min connections">1</entry>
				<entry key="fetch size">1000</entry>

				<entry key="Connection timeout">20</entry>
				<entry key="validate connections">true</entry>
				<entry key="Test while idle">true</entry>
				<entry key="Evictor run periodicity">300</entry>
                <entry key="Max connection idle time">300</entry>
                <entry key="Evictor tests per run">3</entry>


                <entry key="Loose bbox">false</entry>
				<entry key="Estimated extends">true</entry>

                <entry key="preparedStatements">true</entry>
				<entry key="Max open prepared statements">50</entry>

				<entry key="encode functions">true</entry>
			</connectionParameters>
			</dataStore>');
	}

	public function createShpDirDataStore($datastoreName, $workspaceName, $location) {
		return $this->runApi('workspaces/'.$workspaceName.'/datastores', 'POST', '<dataStore>
			<name>'.$datastoreName.'</name>
			<type>Directory of spatial files (shapefiles)</type>
			<enabled>true</enabled>
			<connectionParameters>
				<entry key="memory mapped buffer">false</entry>
				<entry key="timezone">America/Boise</entry>
				<entry key="create spatial index">true</entry>
				<entry key="charset">ISO-8859-1</entry>
				<entry key="filetype">shapefile</entry>
				<entry key="cache and reuse memory maps">true</entry>
				<entry key="url">file:'.$location.'</entry>
				<entry key="namespace">'.$workspaceName.'</entry>
			</connectionParameters>
			</dataStore>');
	}
    public function formatDescription ($string){
        $nameArry = explode('_', $string);
        $capitalizedCountry = ucwords($nameArry[0]);
        $capitalizedAdminLevel = ucwords($nameArry[1]);
        $cut = strlen($nameArry[0]) + strlen($nameArry[1]) + 2;

        $finalStringSmall = str_replace('_', " ", $string);
        $finalStringCapital0 = str_replace($nameArry[0], $capitalizedCountry, substr($finalStringSmall, $cut));
        $finalStringCapital1 = str_replace($nameArry[1], $capitalizedAdminLevel, $finalStringCapital0);
        $finalString = $capitalizedCountry.' '. $capitalizedAdminLevel.' '. $finalStringCapital1;
        return $finalString;
    }

    public function createTiffDirDataStore($datastoreName, $workspaceName, $location, $component) {
        return $this->runApi('workspaces/'.$workspaceName.'/coveragestores', 'POST',
            '<coverageStore>
                <name>'.$datastoreName.'</name>
                <description>Raster Data on '.$this->formatDescription($datastoreName).
                '. This data contributes to the final '.$component.' index.</description>
                <type>GeoTIFF</type>
                <enabled>true</enabled>
                <workspace>'.$workspaceName.'</workspace>

                    <url>file:'.$location.'</url>

           </coverageStore>
      ');
    }



	public function deleteDataStore($datastoreName, $workspaceName) {
		return $this->runApi('workspaces/'.$workspaceName.'/datastores/'.$datastoreName, 'DELETE');
	}

// Layer APIs
	public function listLayers($workspaceName, $datastoreName) {
		return json_decode($this->runApi('workspaces/'.$workspaceName.'/datastores/'.$datastoreName.'/featuretypes.json'), TRUE);
	}


	public function createLayer($layerName, $workspaceName, $datastoreName, $description = '') {
		// Add the store's feature type:
		// If layerName is a shapefile, the shapefile should exist in store already; uploaded via external means
		// If layerName is a postgis database table, that table should already exist

		// Just in case it's a .shp and the .shp was included
		$layerName = str_replace('.shp', '', str_replace('.SHP', '', $layerName));
		return $this->runApi('workspaces/'.$workspaceName.'/datastores/'.$datastoreName.'/featuretypes.xml', 'POST', '<featureType>
			<name>'.$layerName.'</name>
			<nativeName>'.$layerName.'</nativeName>
			<description>'.$description.'</description>
			<store class="dataStore"><name>'.$datastoreName.'</name></store>
			<srs>EPSG:4326</srs>
			</featureType>');
	}

    public function createTifLayer($layerName, $workspaceName, $datastoreName) {
        return $this->runApi('workspaces/'.$workspaceName.'/coveragestores/'.$datastoreName.'/coverages', 'POST',
            '<coverage>
            <name>'.$layerName.'</name>
            <title>'.$layerName.'</title>
            <srs>EPSG:4326</srs>
            <nativeCRS>EPSG:4326</nativeCRS>
            </coverage>
        ');
    }
	public function deleteLayer($layerName, $workspaceName, $datastoreName) {
		$this->runApi('layers/'.$layerName, 'DELETE');
		return $this->runApi('workspaces/'.$workspaceName.'/datastores/'.$datastoreName.'/featuretypes/'.$layerName, 'DELETE');
	}

	public function viewLayer($layerName, $workspaceName, $format = 'GML', $maxGMLFeatures = 1000000, $overrideServerURL = '') {
		// overrideServerURL = useful if using reverseproxy-like configurations
		if ($format == 'GML') {
			//die(urlencode($layerName).'/ows?service=WFS&version=1.0.0&request=GetFeature&typeName='.urlencode($workspaceName).':'.urlencode($layerName).'&maxFeatures='.$maxGMLFeatures);
			return $this->authGet($workspaceName.'/ows?service=WFS&version=1.0.0&request=GetFeature&typeName='.$workspaceName.':'.$layerName.'&maxFeatures='.$maxGMLFeatures);
		} else if ($format == 'KML') {
			return $this->authGet($workspaceName.'/wms/kml?layers='.$workspaceName.':'.$layerName);
		}
	}

	public function viewLayerLegend($layerName, $workspaceName, $width = 20, $height = 20) {
		return $this->authGet("wms?REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&WIDTH=$width&HEIGHT=$height&LAYER=".$workspaceName.':'.$layerName);
	}

	public function wfsPost($apiPath, $post) {
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $this->serverUrl.'wfs'.$apiPath);
		curl_setopt($ch, CURLOPT_USERPWD, $this->username.":".$this->password); 
		if ($post != '') {
			curl_setopt($ch, CURLOPT_HTTPHEADER, 
				array("Content-Type: text/xml",
				'Content-Length: '.strlen($post))
			);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
		}
		curl_setopt($ch, CURLOPT_HEADER, false);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$rslt = curl_exec($ch);
		$info = curl_getinfo($ch);

		if ($info['http_code'] == 401) {
			return 'Access denied. Check login credentials.';
		} else {
			return $rslt;
		}
	}

	public function executeWFSTransaction($WFSTRequest) {
		// WFS-T is just WFS really...
		return $this->wfsPost('', $WFSTRequest);
	}

// Style APIs
	public function listStyles() {	
		return json_decode($this->runApi('styles.json'));
	}

	public function createStyle($styleName, $SLD) {
		$rv = $this->runApi('styles.xml', 'POST', '<style>
			<name>'.$styleName.'</name>
			<filename>'.$styleName.'.sld</filename>
			</style>');
		$this->runApi('styles/'.$styleName, 'PUT', stripslashes($SLD), 'application/vnd.ogc.sld+xml');
		return $rv;
	}

	public function addStyleToLayer($layerName, $workspaceName, $styleName) {
		// Just adds style to the list of supported styles - then WMS requests can pass the desired style
		return $this->runApi('layers/'.$layerName.'.xml', 'PUT',
            '<layer><defaultStyle><name>'.$styleName. '</name>
            <workspace>'.$workspaceName.'</workspace>
            </defaultStyle><enabled>true</enabled></layer>');
    }
    public function addStyleToTifLayer($layerName, $workspaceName, $styleName) {
        // Just adds style to the list of supported styles - then WMS requests can pass the desired style
        return $this->runApi('layers/'.$workspaceName.':'.$layerName, 'PUT',
            '<layer><defaultStyle><name>'.$styleName. '</name>
            <workspace>'.$workspaceName.'</workspace>
            </defaultStyle><enabled>true</enabled></layer>');

    }
	public function deleteStyle($styleName) {
		return $this->runApi('styles/'.$styleName, 'DELETE');
	}
}
